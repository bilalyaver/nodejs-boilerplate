const clientFiles = [
  {
    "path": ".gitignore",
    "content": "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies \n/node_modules\n/.pnp \n.pnp.js\n.yarn/install-state.gz\n\n# testing\n/coverage\n\n# next.js\n/client/.next/\n/public/files/*\n/public/images/*\n/out/\n\n# production\n/build\n\n# misc\n.DS_Store\n*.pem\n\n# debug\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# local env files\n.env*.local\n\n# vercel\n.vercel\n\n# typescript\n*.tsbuildinfo\nnext-env.d.ts\n.env\n"
  },
  {
    "path": "app.js",
    "content": "const { initializeServer } = require('yvr-core/server');\n\ninitializeServer();"
  },
  {
    "path": "client/c/lib/utils.js",
    "content": "import { clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs))\n}\n"
  },
  {
    "path": "client/components/Login.js",
    "content": "\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from \"@/components/ui/card\"\nimport { Label } from \"@/components/ui/label\"\nimport { Input } from \"@/components/ui/input\"\nimport { Button } from \"@/components/ui/button\"\nimport { useState } from \"react\"\nimport { toast } from \"@/hooks/use-toast\"\nimport { useRouter } from \"next/router\"\nimport { setCookie } from 'cookies-next';\nimport { api } from \"yvr-core/client\";\n\n\nconst apiBaseUrl = process.env.API_BASE_URL;\n\nexport default function Login() {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n\n    const router = useRouter();\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        if (!email || !password) {\n            toast({\n                description: \"Please fill all fields\",\n                variant: \"destructive\"\n            });\n            return;\n        }\n\n        try {\n            const data = await api.post(`login`, { email, password });\n            if (data.token) {\n                setCookie(\"token\", data.token, {\n                    maxAge: 24 * 60 * 60, // 24 hours\n                });\n                router.push(\"/\");\n            } else {\n                toast({\n                    description: data.error,\n                    variant: \"destructive\"\n                });\n            }\n        } catch (error) {\n            toast({\n                description: error.response.data.error,\n                variant: \"destructive\"\n            });\n        }\n    }\n    return (\n        <div className=\"h-screen w-full flex flex-col justify-center items-center\">\n            <title>Login Page</title>\n            <h1 className=\"text-4xl font-bold mb-4\">\n                Admin Panel\n            </h1>\n            <Card className=\"w-full max-w-sm\">\n                <CardHeader>\n                    <CardTitle className=\"text-2xl\">Login</CardTitle>\n                    <CardDescription>\n                        Please login to continue\n                    </CardDescription>\n                </CardHeader>\n                <CardContent className=\"grid gap-4\">\n                    <form\n                        onSubmit={handleSubmit}\n                        className=\"grid gap-4\"\n                    >\n                        <div className=\"grid gap-2\">\n                            <Label htmlFor=\"email\">Email</Label>\n                            <Input\n                                onChange={(e) => setEmail(e.target.value)}\n                                value={email}\n                                id=\"email\" type=\"email\" placeholder=\"m@example.com\" required />\n                        </div>\n                        <div className=\"grid gap-2\">\n                            <Label htmlFor=\"password\">Password</Label>\n                            <Input\n                                onChange={(e) => setPassword(e.target.value)}\n                                value={password}\n                                id=\"password\"\n                                placeholder=\"********\"\n                                type=\"password\" required />\n                        </div>\n                        <Button\n                            onClick={handleSubmit}\n                            className=\"w-full\">\n                            Login\n                        </Button>\n                    </form>\n                </CardContent>\n                <CardFooter>\n\n                </CardFooter>\n            </Card>\n        </div>\n    )\n}"
  },
  {
    "path": "client/components/Register.js",
    "content": "\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from \"@/components/ui/card\"\nimport { Label } from \"@/components/ui/label\"\nimport { Input } from \"@/components/ui/input\"\nimport { Button } from \"@/components/ui/button\"\nimport { useState } from \"react\"\nimport { toast } from \"@/hooks/use-toast\"\nimport { useRouter } from \"next/router\"\nimport { setCookie } from 'cookies-next';\nimport { api } from \"yvr-core/client\";\nimport axios from \"axios\"\n\n\nconst apiBaseUrl = process.env.API_BASE_URL;\n\nexport default function Register() {\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const router = useRouter();\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        if (!email || !password || !name) {\n            toast({\n                description: \"Please fill all fields\",\n                variant: \"destructive\"\n            });\n            return;\n        }\n\n        try {\n            const { data } = await axios.post(`/admin/api/createFirstUser`, { name, email, password });\n            if (data.error) {\n                toast({\n                    description: data.error,\n                    variant: \"destructive\"\n                });\n                return;\n            } else {\n                toast({\n                    description: \"User created successfully\",\n                    variant: \"success\"\n                });\n                router.push(\"/login\");\n            }\n            \n        } catch (error) {\n            toast({\n                description: error,\n                variant: \"destructive\"\n            });\n        }\n    }\n    return (\n        <div className=\"h-screen w-full flex flex-col justify-center items-center\">\n            <title>Register Page</title>\n            <h1 className=\"text-4xl font-bold mb-4\">\n                Admin Panel\n            </h1>\n            <Card className=\"w-full max-w-sm\">\n                <CardHeader>\n                    <CardTitle className=\"text-2xl\">Register</CardTitle>\n                    <CardDescription>\n                        Please register to continue\n                    </CardDescription>\n                </CardHeader>\n                <CardContent className=\"grid gap-4\">\n                    <div className=\"grid gap-2\">\n                        <Label htmlFor=\"name\">Name</Label>\n                        <Input\n                            onChange={(e) => setName(e.target.value)}\n                            value={name}\n                            id=\"name\" type=\"string\" placeholder=\"Name\" required />\n                    </div>\n                    <div className=\"grid gap-2\">\n                        <Label htmlFor=\"email\">Email</Label>\n                        <Input\n                            onChange={(e) => setEmail(e.target.value)}\n                            value={email}\n                            id=\"email\" type=\"email\" placeholder=\"m@example.com\" required />\n                    </div>\n                    <div className=\"grid gap-2\">\n                        <Label htmlFor=\"password\">Password</Label>\n                        <Input\n                            onChange={(e) => setPassword(e.target.value)}\n                            value={password}\n                            id=\"password\"\n                            placeholder=\"********\"\n                            type=\"password\" required />\n                    </div>\n                </CardContent>\n                <CardFooter>\n                    <Button\n                        onClick={handleSubmit}\n                        className=\"w-full\">\n                        Register\n                    </Button>\n                </CardFooter>\n            </Card>\n        </div>\n    )\n}\n"
  },
  {
    "path": "client/components/collection/CollectionNavigate.js",
    "content": "\nimport { toast } from \"@/hooks/use-toast\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport { useEffect, useState } from \"react\";\nimport { schemaManager } from \"yvr-core/client\";\n\nconst CollectionNavigate = () => {\n    const [collectionList, setCollectionList] = useState([]);\n    const router = useRouter();\n    const path = router.pathname;\n    const { collectionName } = router.query;\n    const pageName = path.split(\"/\")[2];\n\n    const getCollections = async () => {\n        try {\n            const schema = await schemaManager.loadAll();\n            if (!schema.error) {\n                setCollectionList(schema?.map((s) => s.model));\n            } else {\n                toast({\n                    description: schema.error,\n                    variant: \"destructive\"\n                });\n            }\n        } catch (error) {\n            toast({\n                description: error.message,\n                variant: \"destructive\"\n            })\n        }\n\n    }\n\n    useEffect(() => {\n        getCollections();\n    }, []);\n\n    return (\n        <nav className=\"grid gap-4 text-sm text-muted-foreground\" x-chunk=\"dashboard-04-chunk-0\">\n            <Link href=\"/collections/new\" className={`${pageName == \"new\" && \"font-semibold text-primary\"}`} prefetch={false}>\n                New Collection +\n            </Link>\n            {\n                collectionList?.map((collection) => (\n                    <Link key={collection.name} href={`/collections/${collection.name}`} className={`${collectionName == collection.name && \"font-semibold text-primary\"}`} prefetch={false}>\n                        {collection.name}\n                    </Link>\n                ))\n            }\n        </nav>\n    );\n}\n\nexport default CollectionNavigate;\n"
  },
  {
    "path": "client/components/collection/ContentTypeBuilder.js",
    "content": "import { useState, useEffect } from 'react'\nimport { Button } from \"@/components/ui/button\"\nimport {\n    Dialog,\n    DialogContent,\n    DialogHeader,\n    DialogTitle,\n    DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport { EditIcon } from 'lucide-react'\nimport { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from \"@/components/ui/select\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { schemaManager } from \"yvr-core/client\";\nimport { useRouter } from \"next/router\"\nimport { toast } from \"@/hooks/use-toast\";\nimport TypeIcon from '../contentManagement/TypeIcon'\n\nconst contentTypes = [\n    { id: 'String', name: 'String' },\n    { id: 'Number', name: 'Number' },\n    { id: 'Boolean', name: 'Boolean' },\n    { id: 'Date', name: 'Date' },\n    { id: 'ObjectId', name: 'ObjectId' },\n    { id: 'Media', name: 'Media' },\n    { id: 'Slug', name: 'Slug' },\n    { id: 'RichText', name: 'Rich Text Editor' },\n]\n\nexport default function ContentTypeBuilder({ editFieldName }) {\n    const [open, setOpen] = useState(false)\n    const [step, setStep] = useState(0)\n    const [selectedType, setSelectedType] = useState('')\n    const [fieldName, setFieldName] = useState('')\n    const [isRequired, setIsRequired] = useState(false)\n    const [isUnique, setIsUnique] = useState(false)\n    const [defaultValue, setDefaultValue] = useState('')\n    const [schemas, setSchemas] = useState([]);\n    const [model, setModel] = useState({});\n    const [fields, setFields] = useState([]);\n    const [referenceSchema, setReferenceSchema] = useState(\"\");\n    const [slugSource, setSlugSource] = useState(\"\");\n\n    const router = useRouter();\n    const { collectionName } = router.query;\n\n    // Eski useEffect fonksiyonlarını aktarma\n    useEffect(() => {\n        if (fields && editFieldName) {\n            const foundField = fields?.find(f => f.name == editFieldName);\n            setFieldName(foundField?.name);\n            setSelectedType(foundField?.type);\n            setIsRequired(foundField?.required);\n            setIsUnique(foundField?.unique);\n            setDefaultValue(foundField?.defaultValue);\n            setReferenceSchema(foundField?.referenceSchema);\n            setSlugSource(foundField?.slugSource);\n        }\n    }, [fields, editFieldName]);\n\n    const handleTypeSelect = (typeId) => {\n        setSelectedType(typeId)\n        setStep(1)\n    }\n\n    useEffect(() => {\n        if (editFieldName) {\n            setStep(1)\n        }\n    }, [editFieldName]);\n\n    const handleBack = () => {\n        if (step > 0) {\n            setStep(step - 1)\n            setFieldName('')\n            setIsRequired(false)\n            setIsUnique(false)\n            setDefaultValue('')\n            setReferenceSchema('')\n            setSlugSource('')\n        }\n    }\n\n    const handleFinish = async () => {\n        if (!fieldName || !selectedType) {\n            toast({\n                description: \"Please fill all the fields\",\n            })\n            return;\n        }\n\n        let newFields;\n\n        if (editFieldName) {\n            newFields = fields.map(f => {\n                if (f.name == editFieldName) {\n                    return {\n                        name: fieldName,\n                        type: selectedType,\n                        required: isRequired,\n                        unique: isUnique,\n                        defaultValue: defaultValue,\n                        referenceSchema,\n                        slugSource\n                    }\n                }\n                return f;\n            });\n        } else {\n            newFields = [...fields, {\n                name: fieldName,\n                type: selectedType,\n                required: isRequired,\n                unique: isUnique,\n                defaultValue: defaultValue,\n                referenceSchema,\n                slugSource\n            }];\n        }\n\n        try {\n            const data = await schemaManager.update(model, newFields);\n            toast({\n                description: \"Field added successfully\",\n                type: \"success\"\n            })\n            router.reload();\n        } catch (error) {\n            toast({\n                description: error.message,\n            })\n        }\n\n        setOpen(false)\n        setStep(0)\n        setSelectedType('')\n        setFieldName('')\n        setIsRequired(false)\n        setIsUnique(false)\n        setDefaultValue('')\n        setReferenceSchema('')\n        setSlugSource('')\n    }\n\n    const getFields = async () => {\n        try {\n            const schema = await schemaManager.load(collectionName);\n            setFields(schema?.fields || []);\n            setModel(schema?.model || {});\n        } catch (error) {\n            toast({\n                description: error.message,\n            })\n        }\n    }\n\n    useEffect(() => {\n        collectionName && getFields();\n    }, [collectionName]);\n\n    const getSchemas = async () => {\n        const schemas = await schemaManager.loadAll();\n        setSchemas(schemas);\n    }\n\n    useEffect(() => {\n        selectedType == \"ObjectId\" && getSchemas();\n        selectedType == \"media\" && setReferenceSchema(\"Media\");\n    }, [selectedType]);\n\n    const renderDefaultValueInput = () => {\n        switch (selectedType) {\n            case 'string':\n                return <Input type=\"text\" id=\"defaultValue\" value={defaultValue} onChange={(e) => setDefaultValue(e.target.value)} />\n            case 'number':\n                return <Input type=\"number\" id=\"defaultValue\" value={defaultValue} onChange={(e) => setDefaultValue(e.target.value)} />\n            case 'boolean':\n                return (\n                    <Switch\n                        id=\"defaultValue\"\n                        className=\"block\"\n                        checked={defaultValue == 'true'}\n                        onCheckedChange={(checked) => setDefaultValue(checked ? 'true' : 'false')}\n                    />\n                )\n            case 'date':\n                return <Input type=\"date\" id=\"defaultValue\" value={defaultValue} onChange={(e) => setDefaultValue(e.target.value)} />\n            default:\n                return null\n        }\n    }\n\n    const renderNameInput = () => {\n        switch (selectedType) {\n            default:\n                return (\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"fieldName\">Field Name</Label>\n                        <Input\n                            id=\"fieldName\"\n                            value={fieldName}\n                            onChange={(e) => setFieldName(e.target.value)}\n                            placeholder=\"Enter field name\"\n                        />\n                    </div>\n                )\n        }\n    }\n\n    const renderStep = () => {\n        switch (step) {\n            case 0:\n                return (\n                    <div className=\"space-y-4\">\n                        <h2 className=\"text-lg font-semibold\">Select Content Type</h2>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                            {contentTypes.map((type) => {\n                                return (\n                                    <Button\n                                        key={type.id}\n                                        variant=\"outline\"\n                                        className=\"h-auto py-4 px-4 flex flex-col items-center justify-center\"\n                                        onClick={() => handleTypeSelect(type.id)}\n                                    >\n                                        <TypeIcon type={type.id} />\n                                        <span>{type.name}</span>\n                                    </Button>\n                                )\n                            })}\n                        </div>\n                    </div>\n                )\n            case 1:\n                return (\n                    <div className=\"space-y-4\">\n                        <h2 className=\"text-lg font-semibold\">Configure {selectedType} Field</h2>\n                        {renderNameInput()}\n                        <div className=\"flex items-center space-x-2\">\n                            <Checkbox\n                                id=\"required\"\n                                checked={isRequired}\n                                onCheckedChange={(checked) => setIsRequired(checked)}\n                            />\n                            <Label htmlFor=\"required\">Required</Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                            <Checkbox\n                                id=\"unique\"\n                                checked={isUnique}\n                                onCheckedChange={(checked) => setIsUnique(checked)}\n                            />\n                            <Label htmlFor=\"unique\">Unique</Label>\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"defaultValue\">Default Value</Label>\n                            {renderDefaultValueInput()}\n                        </div>\n                        {selectedType === \"ObjectId\" && (\n                            <div className=\"space-y-2\">\n                                <Label htmlFor=\"referenceSchema\">Reference Schema</Label>\n                                <Select\n                                    onValueChange={(e) => setReferenceSchema(e)}\n                                    value={referenceSchema}\n                                    id=\"field-reference-schema\"\n                                >\n                                    <SelectTrigger>\n                                        <SelectValue placeholder=\"Select reference schema\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                        {schemas.map((schema) => (\n                                            <SelectItem key={schema?.model?.name} value={schema?.model?.name}>\n                                                {schema?.model?.name}\n                                            </SelectItem>\n                                        ))}\n                                    </SelectContent>\n                                </Select>\n                            </div>\n                        )}\n                        {selectedType == \"Slug\" && (\n                            <div className=\"space-y-2\">\n                                <Label htmlFor=\"slugSource\">Slug Source</Label>\n                                <Select\n                                    onValueChange={(e) => setSlugSource(e)}\n                                    value={slugSource}\n                                    id=\"field-slug-source\"\n                                >\n                                    <SelectTrigger>\n                                        <SelectValue placeholder=\"Select slug source\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                        {fields.filter(f => f.type == \"String\").map((field, index) => (\n                                            <SelectItem key={index} value={field?.name}>\n                                                {field?.name}\n                                            </SelectItem>\n                                        ))}\n                                    </SelectContent>\n                                </Select>\n                            </div>\n                        )}\n                    </div>\n                )\n            default:\n                return null\n        }\n    }\n\n    return (\n        <div className=\"p-4\">\n            <Dialog open={open} onOpenChange={setOpen}>\n                <DialogTrigger asChild>\n                    {editFieldName ? <EditIcon className=\"h-5 w-5\" /> : <Button variant=\"default\">New Content Type</Button>}\n\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-[50vw]\">\n                    <DialogHeader>\n                        <DialogTitle>Create New Content Type</DialogTitle>\n                    </DialogHeader>\n                    <div className=\"mt-4\">\n                        {renderStep()}\n                    </div>\n                    <div className=\"mt-6 flex justify-between\">\n                        {step > 0 && (\n                            <Button variant=\"outline\" onClick={handleBack}>\n                                Back\n                            </Button>\n                        )}\n                        {step > 0 && (\n                            <Button onClick={handleFinish} disabled={!fieldName}>\n                                Finish\n                            </Button>\n                        )}\n                    </div>\n                </DialogContent>\n            </Dialog>\n        </div>\n    )\n}"
  },
  {
    "path": "client/components/collection/FieldList.js",
    "content": "import {\n    Table,\n    TableBody,\n    TableCaption,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from \"@/components/ui/table\"\nimport { EditIcon, TrashIcon } from \"lucide-react\";\nimport { Button } from \"../ui/button\";\nimport { useRouter } from \"next/router\";\nimport { schemaManager } from \"yvr-core/client\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { Type, Hash, ToggleLeft, Calendar, Key, Image, Link } from 'lucide-react'\nimport TypeIcon from \"../contentManagement/TypeIcon\";\nimport ContentTypeBuilder from \"./ContentTypeBuilder\";\n\nconst FieldList = ({ collection }) => {\n    const router = useRouter();\n    const { collectionName } = router.query;\n\n    const deleteField = async (field) => {\n\n        const model = collection.model;\n\n        const newFields = collection.fields.filter(f => f.name !== field.name);\n\n        try {\n            const data = await schemaManager.update(model, newFields);\n            toast({\n                description: \"Field added successfully\",\n                type: \"success\"\n            })\n            router.reload();\n        } catch (error) {\n            toast({\n                description: error.message,\n            })\n        }\n    };\n\n    return (\n        <div className=\"z-40\">\n            <Table>\n                <TableCaption>\n                    Fields\n                </TableCaption>\n                <TableHeader>\n                    <TableRow>\n                        <TableHead className=\"w-[100px]\">Name</TableHead>\n                        <TableHead>Type</TableHead>\n                        <TableHead>Default Value</TableHead>\n                        <TableHead>Required</TableHead>\n                        <TableHead>Unique</TableHead>\n                        <TableHead>Action</TableHead>\n                    </TableRow>\n                </TableHeader>\n                <TableBody>\n                    {collection?.fields?.map((field, index) => (\n                        <TableRow \n                        key={index}\n                        className=\"cursor-pointer\"\n                        >\n                            <TableCell className=\"font-medium\">{field.name}</TableCell>\n                            <TableCell>\n                                <div className=\"flex items-center gap-x-2 h-full\">\n                                    <TypeIcon type={field.type} size={14} />\n                                    {field.type}\n                                </div>\n                            </TableCell>\n                            <TableCell>{field.defaultValue}</TableCell>\n                            <TableCell>{field.required ? \"Yes\" : \"No\"}</TableCell>\n                            <TableCell>{field.unique ? \"Yes\" : \"No\"}</TableCell>\n                            <TableCell>\n                                <div className=\"flex gap-2\">\n                                    <Button variant=\"outline\" className=\"w-10 h-10 p-0\">\n                                        <ContentTypeBuilder editFieldName={field.name} />\n                                        \n                                    </Button>\n                                    <Button variant=\"outline\" size=\"icon\" onClick={() => deleteField(field)}\n                                    >\n                                        <TrashIcon className=\"h-5 w-5\" />\n                                    </Button>\n                                </div>\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </div>\n    );\n}\n\nexport default FieldList;"
  },
  {
    "path": "client/components/collection/NewCollection.js",
    "content": "import { schemaManager } from \"yvr-core/client\";\nimport { Button } from \"../ui/button\";\nimport { Input } from \"../ui/input\";\nimport { Label } from \"../ui/label\";\nimport { useState, useEffect } from \"react\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { useRouter } from \"next/router\";\n\nconst NewCollection = () => {\n  const [name, setName] = useState(\"\");\n  const [displayName, setDisplayName] = useState(\"\");\n\n  const router = useRouter();\n\n  const handleSubmit = async (e) => {\n    if (!name) {\n      toast({\n        description: \"Please enter a collection name\",\n\n      })\n    }\n\n    try {\n      const schema = await schemaManager.create({name, displayName, description:\"description\"}, []);\n      toast({\n        description: schema.message,\n        type: \"success\"\n      })\n      router.push('/collections');\n    } catch (error) {\n      toast({\n        description: error.message,\n      })\n    }\n  };\n\n  useEffect(() => {\n    if (displayName) {\n      const turkishToEnglish = (str) => {\n        const charMap = {\n          'ç': 'c',\n          'ğ': 'g',\n          'ı': 'i',\n          'İ': 'I',\n          'ö': 'o',\n          'ş': 's',\n          'ü': 'u',\n          'Ç': 'C',\n          'Ğ': 'G',\n          'Ö': 'O',\n          'Ş': 'S',\n          'Ü': 'U'\n        };\n        return str.replace(/[çğışüöÇĞİŞÜÖ]/g, char => charMap[char] || char);\n      };\n  \n      const formattedName = turkishToEnglish(displayName)\n        .toLowerCase() // Hepsini küçük harfe çevir\n        .split(' ') // Boşluklara göre böl\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1)) // İlk harfi büyük yap\n        .join(''); // Kelimeleri birleştir\n  \n      setName(formattedName);\n    } else {\n      setName('');\n    }\n  }, [displayName]);\n\n\n  return (\n    <div>\n      <div className=\"grid md:grid-cols-2 space-x-5\">\n        <div className=\"space-y-3\">\n          <Label htmlFor=\"displayName\">Collection Display Name</Label>\n          <Input\n            value={displayName}\n            onChange={(e) => setDisplayName(e.target.value)}\n            name=\"displayName\" id=\"displayName\" placeholder=\"Collection Display Name\" />\n        </div>\n        <div className=\"space-y-3\">\n          <Label htmlFor=\"name\">Collection Name</Label>\n          <Input\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            name=\"name\" id=\"name\" placeholder=\"Collection Name\" />\n        </div>\n      </div>\n      <Button\n        className=\"mt-5\"\n        onClick={handleSubmit}>Create Collection</Button>\n    </div>\n  );\n}\n\nexport default NewCollection;\n"
  },
  {
    "path": "client/components/contentManagement/CollectionList.js",
    "content": "import { useRouter } from 'next/router';\nimport { useState, useEffect } from 'react';\nimport { api, schemaManager } from 'yvr-core/client';\nimport CustomTable from '../global/CustomTable';\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { Button } from \"@/components/ui/button\"\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\"\nimport { MoreHorizontal } from \"lucide-react\"\nimport Link from \"next/link\"\n\n\nconst CollectionList = () => {\n    const [list, setList] = useState([]);\n    const [columns, setColumns] = useState([]);\n    const [filterColumn, setFilterColumn] = useState(\"\");\n    const [mediaTypes, setMediaTypes] = useState(\"\");\n\n    const router = useRouter();\n    const { collectionName } = router.query;\n\n    // Listeyi API'den alma fonksiyonu\n    const getList = async () => {\n        try {\n            const { list } = await api.get(`${collectionName}:getAll?populate=${mediaTypes}`);\n            setList(list || []);\n        } catch (error) {\n            console.error(\"Error fetching list:\", error);\n        }\n    };\n\n    // Silme fonksiyonu\n    const deleteItem = async (id) => {\n        try {\n            await api.delete(`${collectionName}:delete?id=${id}`);\n            getList();\n        } catch (error) {\n            console.error(\"Error deleting item:\", error);\n        }\n    };\n\n    // Schema'yı API'den alma fonksiyonu\n    const getSchema = async () => {\n        try {\n            const schema = await schemaManager.load(collectionName);\n            const mediaFields = schema.fields.filter(field => field.type == 'Media');\n            const mediaFieldNames = mediaFields.map(field => field.name);\n            setMediaTypes(mediaFieldNames.join(','));\n\n            const fields = schema.fields.filter(field => field.name !== 'password' && field.type !== 'RichText' && field.type !== 'Media');\n            const tempColumns = [\n                {\n                    id: \"select\",\n                    header: ({ table }) => (\n                        <Checkbox\n                            checked={\n                                table.getIsAllPageRowsSelected() ||\n                                (table.getIsSomePageRowsSelected() && \"indeterminate\")\n                            }\n                            onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n                            aria-label=\"Select all\"\n                        />\n                    ),\n                    cell: ({ row }) => (\n                        <Checkbox\n                            checked={row.getIsSelected()}\n                            onCheckedChange={(value) => row.toggleSelected(!!value)}\n                            aria-label=\"Select row\"\n                        />\n                    ),\n                    enableSorting: false,\n                    enableHiding: false,\n                },\n                ...fields.map(field => ({\n                    accessorKey: field.name,\n                    header: field.name.charAt(0).toUpperCase() + field.name.slice(1),\n                    cell: ({ row }) => <div>{row.getValue(field.name)}</div>,\n                })),\n                {\n                    id: \"actions\",\n                    enableHiding: false,\n                    cell: ({ row }) => {\n                        const item = row.original;\n\n                        return (\n                            <DropdownMenu>\n                                <DropdownMenuTrigger asChild>\n                                    <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                                        <span className=\"sr-only\">Open menu</span>\n                                        <MoreHorizontal className=\"h-4 w-4\" />\n                                    </Button>\n                                </DropdownMenuTrigger>\n                                <DropdownMenuContent align=\"end\">\n                                    <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                                    <DropdownMenuItem\n                                        className=\"capitalize cursor-pointer\"\n                                        onClick={() => navigator.clipboard.writeText(JSON.stringify(item))}\n                                    >\n                                        Copy Object\n                                    </DropdownMenuItem>\n                                    <DropdownMenuSeparator />\n                                    <DropdownMenuItem className=\"capitalize cursor-pointer\">\n                                        <Link href={`/content-management/${collectionName}/${item._id}`}>\n                                            Edit\n                                        </Link>\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem\n                                        className=\"capitalize cursor-pointer hover:bg-red-600 hover:text-white\"\n                                        onClick={(e) => {\n                                            e.stopPropagation();\n                                            deleteItem(item._id)\n                                        }}\n                                    >\n                                        Delete\n                                    </DropdownMenuItem>\n                                </DropdownMenuContent>\n                            </DropdownMenu>\n                        );\n                    },\n                    accessorKey: \"Actions\",\n                },\n            ];\n\n            setColumns(tempColumns);\n            setFilterColumn(fields.length > 0 ? fields[0].name : \"\");\n        } catch (error) {\n            console.error(\"Error loading schema:\", error);\n        }\n    };\n\n    useEffect(() => {\n        if (collectionName) {\n            getSchema();\n        }\n    }, [collectionName]);\n\n    useEffect(() => {\n        if (collectionName) {\n            getList();\n        }\n    }, [mediaTypes, collectionName]);\n\n    return (\n        <div>\n            {list.length > 0 && (\n                <CustomTable\n                    list={list}\n                    columns={columns}\n                    filterColumn={filterColumn}\n                    getList={getList}\n                    onClickRow={(item) => router.push(`/content-management/${collectionName}/${item._id}`)}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default CollectionList;"
  },
  {
    "path": "client/components/contentManagement/ContentManagementNavigate.js",
    "content": "\nimport { toast } from \"@/hooks/use-toast\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport { useEffect, useState } from \"react\";\nimport { schemaManager } from \"yvr-core/client\";\n\nconst ContentManagementNavigate = () => {\n    const [collectionList, setCollectionList] = useState([]);\n    const router = useRouter();\n    const path = router.pathname;\n    const { collectionName } = router.query;\n\n    const getCollections = async () => {\n        try {\n            const schema = await schemaManager.loadAll();\n            if (!schema.error) {\n                setCollectionList(schema?.map((s) => s.model));\n            } else {\n                toast({\n                    description: schema.error,\n                    variant: \"destructive\"\n                });\n            }\n        } catch (error) {\n            toast({\n                description: error.message,\n                variant: \"destructive\"\n            })\n        }\n\n    }\n\n    useEffect(() => {\n        getCollections();\n    }, []);\n\n    return (\n        <nav className=\"grid gap-4 text-sm text-muted-foreground\" x-chunk=\"dashboard-04-chunk-0\">\n            {\n                collectionList?.map((collection) => (\n                    <Link key={collection.name} href={`/content-management/${collection.name}`} className={`${collectionName == collection.name && \"font-semibold text-primary\"}`} prefetch={false}>\n                        {collection.name}\n                    </Link>\n                ))\n            }\n        </nav>\n    );\n}\n\nexport default ContentManagementNavigate;\n"
  },
  {
    "path": "client/components/contentManagement/NewContent.js",
    "content": "import { useRouter } from \"next/router\";\nimport { schemaManager } from \"yvr-core/client\";\nimport { useEffect, useState } from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { api } from 'yvr-core/client';\nimport ContentTypes from \"./contentTypes/ContentTypes\";\nimport { toast } from \"@/hooks/use-toast\";\n\nconst NewContent = () => {\n    const [schema, setSchema] = useState(null);\n    const [formData, setFormData] = useState({});\n\n    const router = useRouter();\n    const { collectionName, id } = router.query;\n\n    const getSchema = async () => {\n        const schema = await schemaManager.load(collectionName);\n        setSchema(schema);\n    }\n\n    useEffect(() => {\n        collectionName && getSchema();\n    }, [collectionName]);\n\n\n    const handleChange = (e) => {\n        setFormData({\n            ...formData,\n            [e.target.name]: e.target.value,\n        });\n    };\n\n    const handleSelectChange = (name, value) => {\n        setFormData({\n            ...formData,\n            [name]: value,\n        });\n    };\n\n    const createSubmit = async (e) => {\n        e.preventDefault();\n        const data = await api.post(`${collectionName}:create`, formData);\n        if (data?.error) {\n            toast({\n                description: data.error,\n                variant: \"destructive\",\n            });\n        } else {\n            toast({\n                description: \"Item created successfully\",\n            });\n            router.push(`/content-management/${collectionName}`);\n        }\n    };\n\n    const getItem = async () => {\n        const item = await api.get(`${collectionName}:get?filter.id=${id}`);\n        setFormData(item);\n    };\n\n    useEffect(() => {\n        id && getItem();\n    }, [id, router.query]);\n\n    const updateSubmit = async (e) => {\n        e.preventDefault();\n        const data = await api.put(`${collectionName}:update?id=${id}`, formData);\n        if (data?.error) {\n            toast({\n                description: data.error,\n                variant: \"destructive\",\n            });\n        } else {\n            toast({\n                description: \"Item updated successfully\",\n            });\n            router.push(`/content-management/${collectionName}`);\n        }\n    };\n\n\n    return (\n        <div>\n            <h1\n                className=\"text-2xl font-semibold\"\n            >\n                {id ? \"Edit\" : \"Create\"}\n                {\" \"}\n                {collectionName}\n            </h1>\n            <div className=\"mt-5\">\n                <form onSubmit={id ? updateSubmit : createSubmit} className=\"space-y-4\">\n                    <ContentTypes schema={schema} formData={formData} handleChange={handleChange} handleSelectChange={handleSelectChange} />\n                    <div>\n                        <Button type=\"submit\" >\n                            {id ? \"Update\" : \"Create\"}\n                        </Button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nexport default NewContent;"
  },
  {
    "path": "client/components/contentManagement/TypeIcon.js",
    "content": "import { Type, Hash, ToggleLeft, Calendar, Key, Image, Link, BookType } from 'lucide-react'\n\nconst TypeIcon = ({ type, size = 24 }) => {\n\n    const icon = {\n        'String': <Type size={size} />,\n        'Number': <Hash size={size} />,\n        'Boolean': <ToggleLeft size={size} />,\n        'Date': <Calendar size={size} />,\n        'ObjectId': <Key size={size} />,\n        'Media': <Image size={size} />,\n        'Slug': <Link size={size} />,\n        'RichText': <BookType size={size} />\n    }\n\n    return (\n        <div>\n            {icon[type]}\n        </div>\n    );\n}\n\nexport default TypeIcon;"
  },
  {
    "path": "client/components/contentManagement/contentTypes/BooleanType.js",
    "content": "import { Checkbox } from \"@/components/ui/checkbox\"; // Varsayılan checkbox bileşeni\nimport { Label } from \"@/components/ui/label\";\n\nconst BooleanType = ({\n    field,\n    formData,\n    handleChange,\n}) => {\n    return (\n        <div key={field.name} className=\"grid gap-2\">\n            <Label htmlFor={field.name}>{field.name.charAt(0).toUpperCase() + field.name.slice(1)}</Label>\n            <Checkbox\n                id={field.name}\n                name={field.name}\n                checked={formData[field.name] || false}\n                onCheckedChange={(checked) => handleChange({ target: { name: field.name, value: checked } })}\n            >\n                {field.name.charAt(0).toUpperCase() + field.name.slice(1)}\n            </Checkbox>\n        </div>\n    );\n}\n\nexport default BooleanType;"
  },
  {
    "path": "client/components/contentManagement/contentTypes/ContentTypes.js",
    "content": "import StringType from \"./StringType\";\nimport ObjectId from \"./ObjectId\";\nimport MediaType from \"./MediaType\";\nimport SlugType from \"./SlugType\";\nimport BooleanType from \"./BooleanType\";\nimport dynamic from 'next/dynamic';\nconst RichTextType = dynamic(\n    () => import('./RichTextType'),\n    { ssr: false }\n);\n\nexport default function ContentTypes({\n    schema,\n    formData,\n    handleChange,\n    handleSelectChange\n}) {\n\n    return (\n        <>\n            {schema?.fields?.map((field, index) => {\n                if (field.type == \"String\" && !field.enum) {\n                    return <StringType key={index} field={field} formData={formData} handleChange={handleChange} />\n                }\n\n                if (field.type == \"ObjectId\") {\n                    return <ObjectId key={index} field={field} formData={formData} handleChange={handleChange} handleSelectChange={handleSelectChange} />\n                }\n\n                if(field.type == \"Slug\") {\n                    return <SlugType key={index} field={field} formData={formData} handleChange={handleChange} />\n                }\n\n                if(field.type == \"Boolean\") {\n                    return <BooleanType key={index} field={field} formData={formData} handleChange={handleChange} />\n                }\n\n                if(field.type == \"Media\") {\n                    return <MediaType key={index} field={field} formData={formData} handleChange={handleChange} />\n                }\n\n                if(field.type == \"RichText\") {\n                    return <RichTextType key={index} field={field} formData={formData} handleChange={handleChange} />\n                }\n\n\n                return null; // Eğer tanımlı olmayan bir type varsa\n            })}\n        </>\n    );\n}\n"
  },
  {
    "path": "client/components/contentManagement/contentTypes/MediaType.js",
    "content": "import { Button } from \"@/components/ui/button\"\nimport {\n    Dialog,\n    DialogContent,\n    DialogTrigger,\n    DialogTitle\n} from \"@/components/ui/dialog\"\nimport MediaManagementPanel from \"../mediaManagementPanel/MediaManagementPanel\";\nimport { Label } from \"@/components/ui/label\";\nimport { useState, useEffect } from 'react';\nimport { ImageIcon } from 'lucide-react';\nimport { api } from 'yvr-core/client';\nimport * as VisuallyHidden from '@radix-ui/react-visually-hidden';\n\nconst imagePath = process.env.IMAGE_PATH\n\nconst MediaType = ({\n    field,\n    formData,\n    handleChange,\n}) => {\n    const [selectedImage, setSelectedImage] = useState(null)\n    const [imageUrl, setImageUrl] = useState(null);\n    const [isOpenModal, setIsOpenModal] = useState(false);\n\n    const getSelectedImage = async () => {\n        const result = await api.get(`media:get?filter.id=${formData[field.name]}`);\n        setSelectedImage(formData[field.name]);\n        setImageUrl(`${imagePath}/${result?.name}`);\n    }\n\n    useEffect(() => {\n        formData[field.name] &&\n            getSelectedImage();\n    }, [formData[field.name]], field.name, selectedImage);\n\n\n\n    useEffect(() => {\n        handleChange({\n            target: {\n                name: field.name,\n                value: selectedImage\n            }\n        })\n    }, [selectedImage]);\n\n\n    return (\n        <div className=\"grid gap-2\">\n            <Label htmlFor={field.name}>{field.name.charAt(0).toUpperCase() + field.name.slice(1)}</Label>\n            <Dialog className=\"block\" open={isOpenModal} onOpenChange={setIsOpenModal}>\n                <DialogTrigger asChild className=\"text-muted-foreground transition-colors hover:text-foreground w-40\">\n                    <div className=\"w-full max-w-md\">\n                        <div\n                            className=\"border-2 border-dashed border-gray-300 rounded-lg p-4 cursor-pointer hover:border-gray-400 transition-colors\"\n                        >\n                            {selectedImage ? (\n                                <img src={imageUrl} alt=\"Selected\" className=\"w-full h-56 object-cover rounded\" />\n                            ) : (\n                                <div className=\"flex flex-col items-center justify-center h-56  rounded\">\n                                    <ImageIcon className=\"w-12 h-12 text-gray-400 mb-2\" />\n                                    <Button type=\"button\" variant=\"outline\">Select Image</Button>\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                </DialogTrigger>\n                <DialogContent className=\"min-w-[90vw] min-h-[90vh] overflow-scroll\">\n                    <VisuallyHidden.Root>\n                        <DialogTitle>Media Management</DialogTitle >\n                    </VisuallyHidden.Root>\n                    <MediaManagementPanel\n                        openType=\"select\"\n                        setSelectedImage={setSelectedImage}\n                        selectedImage={selectedImage}\n                        setIsOpenModal={setIsOpenModal}\n                    />\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n}\n\nexport default MediaType;"
  },
  {
    "path": "client/components/contentManagement/contentTypes/ObjectId.js",
    "content": "import { Input } from \"@/components/ui/input\"; // Varsayılan input bileşeni\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from \"@/components/ui/select\";\nimport { api } from 'yvr-core/client';\nimport { useState, useEffect } from 'react';\n\nconst ObjectId = ({\n    field,\n    formData,\n    handleChange,\n    handleSelectChange,\n}) => {\n    const [references, setReferences] = useState([]);\n\n    const getReferences = async () => {\n        const { list } = await api.get(`${field.referenceSchema}:getAll`);\n        setReferences(list);\n    }\n\n    useEffect(() => {\n        field.referenceSchema && getReferences();\n    }, [field.referenceSchema]);\n\n\n    return (\n        <div className=\"grid gap-2\">\n            <Label htmlFor={field.name}>{field.name.charAt(0).toUpperCase() + field.name.slice(1)}</Label>\n            <Select\n                value={formData[field.name]}\n                onValueChange={(value) => {\n                    value && handleSelectChange(field.name, value);\n                }}\n            >\n                <SelectTrigger id={field.name}>\n                    <SelectValue placeholder={`Select ${field.name}`} />\n                </SelectTrigger>\n                <SelectContent>\n                    {references?.map((option, index) => (\n                        <SelectItem key={index} value={option?._id}>\n                            {option?.name?.charAt(0).toUpperCase() + option?.name?.slice(1)}\n                        </SelectItem>\n                    ))}\n                </SelectContent>\n            </Select>\n        </div>\n    );\n}\n\nexport default ObjectId;"
  },
  {
    "path": "client/components/contentManagement/contentTypes/RichTextType.js",
    "content": "import { Label } from \"@/components/ui/label\";\nimport { useState, useEffect, useRef } from 'react';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\n\nimport {\n    ClassicEditor,\n    AccessibilityHelp,\n    Alignment,\n    Autoformat,\n    AutoImage,\n    AutoLink,\n    Autosave,\n    BlockQuote,\n    Bold,\n    CloudServices,\n    Code,\n    CodeBlock,\n    Essentials,\n    FindAndReplace,\n    FontBackgroundColor,\n    FontColor,\n    FontFamily,\n    FontSize,\n    GeneralHtmlSupport,\n    Heading,\n    HorizontalLine,\n    HtmlComment,\n    HtmlEmbed,\n    ImageBlock,\n    ImageCaption,\n    ImageInline,\n    ImageInsertViaUrl,\n    ImageResize,\n    ImageStyle,\n    ImageTextAlternative,\n    ImageToolbar,\n    ImageUpload,\n    Italic,\n    Link,\n    LinkImage,\n    Paragraph,\n    SelectAll,\n    ShowBlocks,\n    SourceEditing,\n    SpecialCharacters,\n    SpecialCharactersArrows,\n    SpecialCharactersCurrency,\n    SpecialCharactersEssentials,\n    SpecialCharactersLatin,\n    SpecialCharactersMathematical,\n    SpecialCharactersText,\n    Strikethrough,\n    Subscript,\n    Superscript,\n    Table,\n    TableCaption,\n    TableCellProperties,\n    TableColumnResize,\n    TableProperties,\n    TableToolbar,\n    TextTransformation,\n    Underline,\n    Undo\n} from 'ckeditor5';\n\nimport 'ckeditor5/ckeditor5.css';\n\nconst RichTextType = ({ field, formData, handleChange }) => {\n    const editorContainerRef = useRef(null);\n    const editorRef = useRef(null);\n    const [isLayoutReady, setIsLayoutReady] = useState(false);\n\n    useEffect(() => {\n        setIsLayoutReady(true);\n        return () => setIsLayoutReady(false);\n    }, []);\n\n    const editorConfig = {\n        extraPlugins: [CustomUploadAdapterPlugin],\n        toolbar: {\n            items: [\n                'undo',\n                'redo',\n                '|',\n                'showBlocks',\n                'findAndReplace',\n                'selectAll',\n                '|',\n                'heading',\n                '|',\n                'fontSize',\n                'fontFamily',\n                'fontColor',\n                'fontBackgroundColor',\n                '|',\n                'bold',\n                'italic',\n                'underline',\n                'strikethrough',\n                'subscript',\n                'superscript',\n                '|',\n                'specialCharacters',\n                'horizontalLine',\n                'link',\n                'insertTable',\n                'blockQuote',\n                '|',\n                'alignment',\n                '|',\n                'imageUpload',\n                'accessibilityHelp'\n            ],\n            shouldNotGroupWhenFull: true\n        },\n        plugins: [\n            AccessibilityHelp,\n            Alignment,\n            Autoformat,\n            AutoImage,\n            AutoLink,\n            Autosave,\n            BlockQuote,\n            Bold,\n            CloudServices,\n            Code,\n            CodeBlock,\n            Essentials,\n            FindAndReplace,\n            FontBackgroundColor,\n            FontColor,\n            FontFamily,\n            FontSize,\n            GeneralHtmlSupport,\n            Heading,\n            HorizontalLine,\n            HtmlComment,\n            HtmlEmbed,\n            ImageBlock,\n            ImageCaption,\n            ImageInline,\n            ImageInsertViaUrl,\n            ImageResize,\n            ImageStyle,\n            ImageTextAlternative,\n            ImageToolbar,\n            ImageUpload,\n            Italic,\n            Link,\n            LinkImage,\n            Paragraph,\n            SelectAll,\n            ShowBlocks,\n            SourceEditing,\n            SpecialCharacters,\n            SpecialCharactersArrows,\n            SpecialCharactersCurrency,\n            SpecialCharactersEssentials,\n            SpecialCharactersLatin,\n            SpecialCharactersMathematical,\n            SpecialCharactersText,\n            Strikethrough,\n            Subscript,\n            Superscript,\n            Table,\n            TableCaption,\n            TableCellProperties,\n            TableColumnResize,\n            TableProperties,\n            TableToolbar,\n            TextTransformation,\n            Underline,\n            Undo\n        ],\n        fontFamily: {\n            supportAllValues: true\n        },\n        fontSize: {\n            options: [10, 12, 14, 'default', 18, 20, 22],\n            supportAllValues: true\n        },\n        heading: {\n            options: [\n                {\n                    model: 'paragraph',\n                    title: 'Paragraph',\n                    class: 'ck-heading_paragraph'\n                },\n                {\n                    model: 'heading1',\n                    view: 'h1',\n                    title: 'Heading 1',\n                    class: 'ck-heading_heading1'\n                },\n                {\n                    model: 'heading2',\n                    view: 'h2',\n                    title: 'Heading 2',\n                    class: 'ck-heading_heading2'\n                },\n                {\n                    model: 'heading3',\n                    view: 'h3',\n                    title: 'Heading 3',\n                    class: 'ck-heading_heading3'\n                },\n                {\n                    model: 'heading4',\n                    view: 'h4',\n                    title: 'Heading 4',\n                    class: 'ck-heading_heading4'\n                },\n                {\n                    model: 'heading5',\n                    view: 'h5',\n                    title: 'Heading 5',\n                    class: 'ck-heading_heading5'\n                },\n                {\n                    model: 'heading6',\n                    view: 'h6',\n                    title: 'Heading 6',\n                    class: 'ck-heading_heading6'\n                }\n            ]\n        },\n        htmlSupport: {\n            allow: [\n                {\n                    name: /^.*$/,\n                    styles: true,\n                    attributes: true,\n                    classes: true\n                }\n            ]\n        },\n        image: {\n            styles: ['alignLeft', 'alignCenter', 'alignRight', 'alignBlock', 'alignInline', 'maxHeight'],\n            toolbar: ['toggleImageCaption', 'imageTextAlternative', 'imageStyle:alignLeft', 'imageStyle:alignCenter', 'imageStyle:alignRight'],\n        },\n        link: {\n            addTargetToExternalLinks: true,\n            defaultProtocol: 'https://',\n            decorators: {\n                toggleDownloadable: {\n                    mode: 'manual',\n                    label: 'Downloadable',\n                    attributes: {\n                        download: 'file'\n                    }\n                }\n            }\n        },\n        placeholder: 'Type or paste your content here!',\n        table: {\n            contentToolbar: ['tableColumn', 'tableRow', 'mergeTableCells', 'tableProperties', 'tableCellProperties']\n        }\n    };\n    return (\n        <div className=\"grid gap-2\">\n            <Label htmlFor={field.name}>{field.name.charAt(0).toUpperCase() + field.name.slice(1)}</Label>\n            <div className='h-full'>\n                <div className=\"main-container text-black\">\n                    <div className=\"editor-container editor-container_classic-editor\" ref={editorContainerRef}>\n                        <div className=\"editor-container__editor\">\n                            <div ref={editorRef}>{isLayoutReady &&\n                                <CKEditor\n                                    data={formData[field.name]}\n                                    onChange={(event, editor) => {\n                                        const data = editor?.getData();\n                                        handleChange({\n                                            target: {\n                                                name: field.name,\n                                                value: data\n                                            }\n                                        });\n                                    }}\n                                    onReady={(editor) => {\n                                        editor?.editing?.view?.change((writer) => {\n                                            writer.setStyle(\n                                                \"height\",\n                                                \"500px\",\n                                                editor?.editing?.view?.document?.getRoot()\n                                            );\n                                        });\n                                    }}\n                                    editor={ClassicEditor} config={editorConfig} />}</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\n// Custom upload adapter plugin\nfunction CustomUploadAdapterPlugin(editor) {\n    editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {\n        return new CustomUploadAdapter(loader);\n    };\n}\n\nclass CustomUploadAdapter {\n    constructor(loader) {\n        this.loader = loader;\n    }\n\n    // Starts the upload process.\n    upload() {\n        return this.loader.file\n            .then(file => new Promise((resolve, reject) => {\n                const reader = new FileReader();\n                reader.onload = () => {\n                    resolve({ default: reader.result });\n                };\n                reader.onerror = error => {\n                    reject(error);\n                };\n                reader.readAsDataURL(file);\n            }));\n    }\n\n    // Aborts the upload process.\n    abort() {\n        if (this.xhr) {\n            this.xhr.abort();\n        }\n    }\n}\n\nexport default RichTextType;"
  },
  {
    "path": "client/components/contentManagement/contentTypes/SlugType.js",
    "content": "import { Input } from \"@/components/ui/input\"; // Varsayılan input bileşeni\nimport { Label } from \"@/components/ui/label\";\nimport slugify from 'slugify'; // Slugify kütüphanesi\nimport { useEffect } from 'react';\n\nconst SlugType = ({\n    field,\n    formData,\n    handleChange,\n}) => {\n    const slugSource = formData[field.slugSource] || '';\n\n    useEffect(() => {\n        if (field.slugSource) {\n            handleChange({\n                target: {\n                    name: field.name,\n                    value: slugify(slugSource,\n                        { lower: true, remove: /[*+~.()'\"!:@]/g })\n                }\n            });\n        }\n    }, [slugSource, formData[field.slugSource]]);\n\n\n    return (\n        <div key={field.name} className=\"grid gap-2\">\n            <Label htmlFor={field.name}>{field.name.charAt(0).toUpperCase() + field.name.slice(1)}</Label>\n            <Input\n                id={field.name}\n                name={field.name}\n                type=\"text\"\n                required={field.required}\n                value={slugify(slugSource,\n                    { lower: true, remove: /[*+~.()'\"!:@]/g })}\n                onChange={handleChange}\n                placeholder={`Enter ${field.name}`}\n                disabled\n            />\n        </div>\n    );\n}\n\nexport default SlugType;"
  },
  {
    "path": "client/components/contentManagement/contentTypes/StringType.js",
    "content": "import { Input } from \"@/components/ui/input\"; // Varsayılan input bileşeni\nimport { Label } from \"@/components/ui/label\";\n\nconst StringType = ({\n    field,\n    formData,\n    handleChange,\n}) => {\n    return (\n        <div>\n            {\n                field.type === \"String\" && !field.enum && (\n                    <div key={field.name} className=\"grid gap-2\">\n                        <Label htmlFor={field.name}>{field.name.charAt(0).toUpperCase() + field.name.slice(1)}</Label>\n                        <Input\n                            id={field.name}\n                            name={field.name}\n                            type=\"text\"\n                            required={field.required}\n                            value={formData[field?.name] || \"\"}\n                            onChange={handleChange}\n                            placeholder={`Enter ${field.name}`}\n                        />\n                    </div>\n                )\n            }\n                {\n                    field.enum && field.type === \"String\" && (\n                        <div key={field.name} className=\"grid gap-2\">\n                            <Label htmlFor={field.name}>{field.name.charAt(0).toUpperCase() + field.name.slice(1)}</Label>\n                            <Select\n                                value={formData[field.name]}\n                                onValueChange={(value) => handleSelectChange(field.name, value)}\n                            >\n                                <SelectTrigger id={field.name}>\n                                    <SelectValue placeholder={`Select ${field.name}`} />\n                                </SelectTrigger>\n                                <SelectContent>\n                                    {field.enum.map((option) => (\n                                        <SelectItem key={option} value={option}>\n                                            {option.charAt(0).toUpperCase() + option.slice(1)}\n                                        </SelectItem>\n                                    ))}\n                                </SelectContent>\n                            </Select>\n                        </div>\n                    )\n                }\n        </div>\n    );\n}\n\nexport default StringType;"
  },
  {
    "path": "client/components/contentManagement/mediaManagementPanel/MediaButtons.js",
    "content": "import { Trash2, Check, GalleryThumbnails, Save, Tag, Copy } from 'lucide-react'\nimport MediaManagementImageEdit from './MediaManagementImageEdit';\nimport { Button } from '@/components/ui/button';\nimport { useState, useEffect } from 'react';\nimport { Input } from '@/components/ui/input';\nimport { api } from 'yvr-core/client';\nimport { Label } from '@/components/ui/label';\nimport { toast } from '@/hooks/use-toast';\n\nconst imagePath = process.env.IMAGE_PATH;\n\nconst MediaButtons = ({\n    item,\n    getItems,\n    handleDelete,\n    selectedImage\n}) => {\n    const [isOpenAltText, setIsOpenAltText] = useState(false);\n    const [altText, setAltText] = useState(\"\");\n    const [isOpenTags, setIsOpenTags] = useState(false);\n    const [tags, setTags] = useState([]);\n\n\n    useEffect(() => {\n        if (item.alt) {\n            setAltText(item.alt);\n        }\n\n        if (item.tags) {\n            setTags(item.tags.join(','));\n        }\n    }, [item]);\n\n    const handleAltText = async (id, alt) => {\n        const result = await api.put(`media:update?id=${id}`, {\n            alt\n        });\n        if (result) {\n            setIsOpenAltText(false);\n        }\n    };\n\n    const handleTags = async (id, tags) => {\n        const result = await api.put(`media:update?id=${id}`, {\n            tags\n        });\n        if (result) {\n            setIsOpenTags(false);\n        }\n    }\n\n    \n    \n\n\n    return (\n        <div>\n            <div className=\"flex space-x-2 mt-2\">\n                <MediaManagementImageEdit item={item} getItems={getItems} />\n                <Button variant=\"outline\" title=\"Add Alternative Text\" size=\"sm\" onClick={(e) => {\n                    e.stopPropagation();\n                    setIsOpenAltText(!isOpenAltText);\n                    setIsOpenTags(false);\n                }}>\n                    <GalleryThumbnails className=\"w-4 h-4\" />\n                    <span className=\"sr-only\">\n                        Add Alternative Text\n                    </span>\n                </Button>\n                <Button variant=\"outline\" title=\"Tags\" size=\"sm\" onClick={(e) => {\n                    e.stopPropagation();\n                    setIsOpenTags(!isOpenTags);\n                    setIsOpenAltText(false);\n                }}>\n                    <Tag className=\"w-4 h-4\" />\n                    <span className=\"sr-only\">\n                        Tags\n                    </span>\n                </Button>\n                <Button variant=\"outline\" title=\"Copy Url\" size=\"sm\" \n                onClick={(e) => {\n                    e.stopPropagation();\n                    navigator.clipboard.writeText(`${imagePath}/${item.name}`);\n                    toast({\n                        description: 'URL copied to clipboard',\n                    })\n                }}>\n                    <Copy className=\"w-4 h-4\" />\n                    <span className=\"sr-only\">Copy Url</span>\n                </Button>\n                <Button variant=\"outline\" className=\"hover:bg-red-600 hover:border-transparent\" title=\"Delete Media\" size=\"sm\" \n                onClick={(e) => {\n                    e.stopPropagation();\n                    handleDelete(item._id, false)\n                }}>\n                    <Trash2 className=\"w-4 h-4\" />\n                    <span className=\"sr-only\">Delete Media</span>\n                </Button>\n                <div className='flex items-center justify-end w-full'>\n                    {selectedImage === item._id && <span className=\"text-primary\">\n                        <Check color='green' className=\"w-4 h-4\" />\n                    </span>}\n                </div>\n            </div>\n            <div className='mt-3'>\n                {isOpenAltText && (\n                    <div className=\"flex items-start space-x-2\">\n                        <div className='w-full'>\n                        <Input\n                            type=\"text\"\n                            value={altText}\n                            onChange={(e) => setAltText(e.target.value)}\n                            className=\"w-full\"\n                            placeholder=\"Enter Alternative Text\"\n                        />\n                        <Label className=\"text-xs\">Enter alternative text for the image</Label>\n                        </div>\n                        <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                                handleAltText(item._id, altText);\n                            }}\n                        >\n                            <Save className=\"w-4 h-4\" />\n                        </Button>\n                    </div>\n                )}\n            </div>\n            <div className='mt-3'>\n                {isOpenTags && (\n                    <div className=\"flex items-start space-x-2\">\n                        <div className='w-full'>\n                            <Input\n                                type=\"text\"\n                                value={tags}\n                                onChange={(e) => {\n                                    setTags(e.target.value.split(','));\n                                }}\n                                className=\"w-full\"\n                                placeholder=\"Tags\"\n                            />\n                            <Label className=\"text-xs\">Separate tags with a comma</Label>\n                        </div>\n                        <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                                handleTags(item._id, tags);\n                            }}\n                        >\n                            <Save className=\"w-4 h-4\" />\n                        </Button>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default MediaButtons;"
  },
  {
    "path": "client/components/contentManagement/mediaManagementPanel/MediaManagementImageEdit.js",
    "content": "import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\"\nimport { Crop } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { mediaManager } from 'yvr-core/client'\nconst imagePath = process.env.IMAGE_PATH\n\nimport ImageEditor from \"yvr-image-editor\";\nimport { toast } from \"@/hooks/use-toast\";\n\n\nconst MediaManagementImageEdit = ({ item, getItems }) => {\n    const [isOpenModal, setIsOpenModal] = useState(false);\n    const [dimensions, setDimensions] = useState({});\n\n\n    const updateMedia = async (file) => {\n        const result = await mediaManager.updateFile(item._id, {\n            file,\n            dimensions\n        });\n\n        if (result) {\n            toast({\n                description: 'Image updated successfully',\n                variant: \"success\"\n            })\n            getItems();\n            setIsOpenModal(false);\n        } else {\n            toast({\n                description: 'Error updating image',\n                variant: \"destructive\"\n            })\n        }\n    };\n\n    return (\n        <div>\n            <Dialog\n                open={isOpenModal}\n                onOpenChange={setIsOpenModal}\n            >\n                <DialogTrigger asChild\n                onClick={(e) => {\n                    e.stopPropagation();\n                    // Eğer başka işlemler yapmak istiyorsanız buraya ekleyebilirsiniz\n                }}\n                >\n                    <Button\n                        variant=\"outline\"\n                        title=\"Crop Image\"\n                        size=\"sm\"\n                        \n                    >\n                        <Crop className=\"w-4 h-4\" />\n                        <span className=\"sr-only\">\n                            Edit Image\n                        </span>\n                    </Button>\n                </DialogTrigger>\n                <DialogContent className=\"min-w-[85vw] min-h-[85vh] overflow-scroll\">\n                    <DialogHeader>\n                        <DialogTitle>\n                            Edit Image\n                        </DialogTitle>\n                    </DialogHeader>\n                    <div className=\"h-[85vh] w-[85vw]\">\n                        <ImageEditor\n                            currentImage={`${imagePath}/${item.name}`}\n                            getFile={(file) => updateMedia(file)}\n                            getSizes={(sizes) => setDimensions(sizes)}\n                        />\n                    </div>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n}\n\nexport default MediaManagementImageEdit;"
  },
  {
    "path": "client/components/contentManagement/mediaManagementPanel/MediaManagementMain.js",
    "content": "import { Button } from \"@/components/ui/button\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogTrigger,\n  DialogTitle\n} from \"@/components/ui/dialog\"\nimport MediaManagementPanel from \"./MediaManagementPanel\"\nimport * as VisuallyHidden from '@radix-ui/react-visually-hidden';\n\nexport default function MediaManagementMain() {\n  return (\n    <Dialog>\n      <DialogTrigger asChild className=\"text-muted-foreground transition-colors hover:text-foreground w-40\">\n        <Button className=\"text-muted-foreground transition-colors hover:text-foreground w-40\">Media Management</Button>\n      </DialogTrigger>\n      <DialogContent className=\"min-w-[90vw] min-h-[90vh] overflow-scroll\">\n        <VisuallyHidden.Root>\n          <DialogTitle>Media Management</DialogTitle >\n        </VisuallyHidden.Root>\n        <MediaManagementPanel />\n      </DialogContent>\n    </Dialog>\n  )\n}\n"
  },
  {
    "path": "client/components/contentManagement/mediaManagementPanel/MediaManagementPanel.js",
    "content": "import { useState, useEffect, useCallback, useRef } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from \"@/components/ui/dialog\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Trash2, Search, Grid, List, Folder, ArrowLeft, Plus } from 'lucide-react'\nimport { toast } from '@/hooks/use-toast'\nimport { api, mediaManager } from 'yvr-core/client'\nimport MediaButtons from './MediaButtons'\n\nconst imagePath = process.env.IMAGE_PATH\n\nexport default function MediaManagementPanel({ openType, setSelectedImage, selectedImage, setIsOpenModal }) {\n    const [folders, setFolders] = useState([])\n    const [items, setItems] = useState([])\n    const [currentFolder, setCurrentFolder] = useState(null);\n    const [currentFolderId, setCurrentFolderId] = useState(null)\n    const [view, setView] = useState('grid')\n    const [searchTerm, setSearchTerm] = useState('')\n    const [uploading, setUploading] = useState(false)\n    const [uploadProgress, setUploadProgress] = useState(0)\n    const fileInputRef = useRef(null)\n    const [isNewFolderModalOpen, setIsNewFolderModalOpen] = useState(false)\n    const [newFolderName, setNewFolderName] = useState('')\n\n    const getFolders = async () => {\n        try {\n            const { list } = await api.get(`folder:getAll?filter.parent=${currentFolderId}`);\n            setFolders(list);\n        } catch (error) {\n            toast({\n                description: 'Bir hata oluştu. Lütfen tekrar deneyin.',\n            })\n        }\n    };\n\n    const getCurrentFolder = async () => {\n        try {\n            const folder = await api.get(`folder:get?id=${currentFolderId}`);\n            setCurrentFolder(folder);\n        } catch (error) {\n            toast({\n                description: 'Bir hata oluştu. Lütfen tekrar deneyin.',\n            })\n        }\n    };\n\n    useEffect(() => {\n        getFolders();\n    }, [currentFolderId]);\n\n    useEffect(() => {\n        currentFolderId ? getCurrentFolder() : setCurrentFolder(null);\n    }, [currentFolderId]);\n\n    const getItems = async () => {\n        try {\n            const { list } = await api.get(`media:getAll?filter.folder=${currentFolderId}`);\n            setItems(list);\n        } catch (error) {\n            toast({\n                description: 'Bir hata oluştu. Lütfen tekrar deneyin.',\n            })\n        }\n    };\n\n    useEffect(() => {\n        getItems();\n    }, [currentFolderId]);\n\n    const currentFolderName = currentFolderId\n        ? folders.find(folder => folder._id == currentFolderId)?.name\n        : 'Root'\n\n    const filteredFolders = folders?.filter(folder =>\n        folder.parent == currentFolderId &&\n        folder.name.toLowerCase().includes(searchTerm.toLowerCase())\n    )\n\n\n    const filteredItems = items?.filter(item =>\n        item.folder == currentFolderId &&\n        item.name.toLowerCase().includes(searchTerm.toLowerCase())\n    )\n\n\n    const handleDelete = async (id, isFolder) => {\n        try {\n            if (isFolder) {\n                await mediaManager.deleteFolder(id)\n                getFolders()\n            } else {\n                await mediaManager.deleteFile(id)\n                getItems()\n            }\n        } catch (error) {\n            toast({\n                description: error.message,\n            })\n        }\n    }\n\n    const handleUpload = useCallback((acceptedFiles) => {\n        setUploading(true);\n        setUploadProgress(0);\n\n        const totalFiles = acceptedFiles.length;\n        const progressMap = {}; // Her dosya için ilerleme yüzdesini saklar\n        let completedUploads = 0;\n\n        const updateProgress = () => {\n            const totalProgress = Object.values(progressMap).reduce((acc, progress) => acc + progress, 0);\n            setUploadProgress(Math.round(totalProgress / totalFiles));\n        };\n\n        mediaManager.uploadFiles(acceptedFiles, {\n            folder: currentFolderId,\n            onProgress: (file, progress) => {\n                progressMap[file.name] = progress;\n                updateProgress();\n            },\n            onSuccess: (file) => {\n                completedUploads++;\n                if (completedUploads === totalFiles) {\n                    setUploading(false);\n                    setUploadProgress(0);\n                    getItems();\n                }\n            },\n            onError: (error) => {\n                setUploading(false);\n                setUploadProgress(0);\n                toast({\n                    description: 'Bir hata oluştu. Lütfen tekrar deneyin.',\n                })\n            },\n            user: '66cb7ac3b6733b3bd5386564'\n        })\n\n    }, [currentFolderId]);\n\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({\n        onDrop: handleUpload,\n        accept: {\n            'image/*': [],\n            'video/*': [],\n            'application/pdf': []\n        },\n        noClick: true\n    })\n\n    const handleCreateFolder = async () => {\n        if (newFolderName.trim()) {\n            const newFolder = {\n                name: newFolderName.trim(),\n                parent: currentFolderId,\n                user: '66cb7ac3b6733b3bd5386564'\n            }\n            await api.post('folder:create', newFolder)\n            getFolders()\n            setNewFolderName('')\n            setIsNewFolderModalOpen(false)\n        }\n    }\n\n    const handleOpenFolder = (folder) => {\n        setCurrentFolderId(folder._id)\n    }\n\n    const handleGoBack = () => {\n        setCurrentFolderId(currentFolder?.parent || null)\n    }\n\n\n    const handleAreaClick = () => {\n        fileInputRef.current?.click()\n    }\n\n    return (\n        <div className=\"w-full mx-auto p-4 overflow-scroll max-h-screen\">\n            <h1 className=\"text-2xl font-bold mb-4\">Medya Yönetim Paneli</h1>\n\n            <div className=\"flex justify-between items-center mb-4\">\n                <div className=\"flex items-center space-x-2\">\n                    <Input\n                        type=\"text\"\n                        placeholder=\"Medya ara...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"w-64\"\n                    />\n                    <Search className=\"text-gray-400\" />\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                    <Button onClick={() => setView('grid')} variant={view === 'grid' ? 'default' : 'outline'}>\n                        <Grid className=\"w-4 h-4 mr-2\" />\n                        <span className=\"sr-only\">Grid görünümü</span>\n                        Grid\n                    </Button>\n                    <Button onClick={() => setView('list')} variant={view === 'list' ? 'default' : 'outline'}>\n                        <List className=\"w-4 h-4 mr-2\" />\n                        <span className=\"sr-only\">Liste görünümü</span>\n                        Liste\n                    </Button>\n                    <Dialog open={isNewFolderModalOpen} onOpenChange={setIsNewFolderModalOpen}>\n                        <DialogTrigger asChild>\n                            <Button>\n                                <Plus className=\"w-4 h-4 mr-2\" />\n                                <span className=\"sr-only\">Yeni klasör oluştur</span>\n                                Yeni Klasör\n                            </Button>\n                        </DialogTrigger>\n                        <DialogContent>\n                            <DialogHeader>\n                                <DialogTitle>Yeni Klasör Oluştur</DialogTitle>\n                            </DialogHeader>\n                            <div className=\"grid gap-4 py-4\">\n                                <div className=\"grid grid-cols-4 items-center gap-4\">\n                                    <Label htmlFor=\"folderName\" className=\"text-right\">\n                                        Klasör Adı\n                                    </Label>\n                                    <Input\n                                        id=\"folderName\"\n                                        value={newFolderName}\n                                        onChange={(e) => setNewFolderName(e.target.value)}\n                                        className=\"col-span-3\"\n                                    />\n                                </div>\n                            </div>\n                            <DialogFooter>\n                                <Button variant=\"outline\" onClick={() => setIsNewFolderModalOpen(false)}>İptal</Button>\n                                <Button onClick={handleCreateFolder}>Oluştur</Button>\n                            </DialogFooter>\n                        </DialogContent>\n                    </Dialog>\n                </div>\n            </div>\n\n            <div className=\"mb-4\">\n                <Button onClick={handleGoBack} disabled={currentFolderId == null}>\n                    <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                    <span className=\"sr-only\">Üst klasöre dön</span>\n                    Geri\n                </Button>\n                <span className=\"ml-2 font-semibold\">{currentFolder?.name || \"Root\"}</span>\n            </div>\n\n            <div\n                {...getRootProps()}\n                className={`border-2 border-dashed rounded-lg p-8 mb-4 text-center cursor-pointer ${isDragActive ? 'border-primary' : 'border-gray-300'}`}\n                onClick={handleAreaClick}\n                onKeyDown={(e) => {\n                    if (e.key === 'Enter' || e.key === ' ') {\n                        handleAreaClick()\n                    }\n                }}\n                tabIndex={0}\n                role=\"button\"\n                aria-label=\"Dosya yükleme alanı. Dosyaları buraya sürükleyip bırakın veya tıklayarak seçin.\"\n            >\n                <input {...getInputProps()} ref={fileInputRef} />\n                {isDragActive ? (\n                    <p>Dosyaları buraya bırakın...</p>\n                ) : (\n                    <p>Dosyaları yüklemek için buraya sürükleyin veya tıklayın</p>\n                )}\n                {uploading && (\n                    <Progress value={uploadProgress} className=\"w-full mt-4\" />\n                )}\n            </div>\n\n            <div className={view === 'grid' ? 'grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4' : 'space-y-4'}>\n                {filteredFolders?.map((folder, index) => (\n                    <Card key={index} className={view === 'list' ? 'flex items-center' : ''}>\n                        <CardContent className={`p-4 ${view === 'list' ? 'flex items-center justify-between w-full' : ''}`}>\n                            <div className={`${view === 'list' ? 'flex items-center' : ''}`}>\n                                <Folder className={`mb-2 ${view === 'list' ? 'w-16 h-16 mr-4' : 'w-full h-32'}`} />\n                                <div>\n                                    <h3 className=\"font-semibold\">{folder.name}</h3>\n                                    <p className=\"text-sm text-gray-500\">Folder</p>\n                                </div>\n                            </div>\n                            <div className=\"flex space-x-2 mt-2\">\n                                <Button variant=\"outline\" size=\"sm\" onClick={() => handleOpenFolder(folder)}>\n                                    <span className=\"sr-only\">Klasörü aç</span>\n                                    Aç\n                                </Button>\n                                <Button variant=\"outline\" size=\"sm\" onClick={() => handleDelete(folder._id, true)}>\n                                    <Trash2 className=\"w-4 h-4\" />\n                                    <span className=\"sr-only\">Klasörü sil</span>\n                                </Button>\n                            </div>\n                        </CardContent>\n                    </Card>\n                ))}\n                {filteredItems?.map((item, index) => (\n                    <Card key={index}\n                        className={`${view === 'list' ? 'flex items-center' : ''} \n                    ${openType === 'select' ? 'hover:shadow-2xl cursor-pointer hover:scale-110 transition-all duration-300' : ''}`}\n                        onClick={() => {\n                            if (openType === 'select') {\n                                setSelectedImage(item?._id);\n                                setIsOpenModal(false);\n                            }\n                        }}\n                    >\n                        <CardContent className={`p-4 ${view === 'list' ? 'flex items-center justify-between w-full' : ''}`}>\n                            <div className={`${view === 'list' ? 'flex items-center' : ''}`}>\n                                <img src={`${imagePath}/${item?.name}`} alt={item.name} className={`mb-2 rounded-md ${view === 'list' ? 'w-16 h-16 mr-4' : 'w-full h-32 object-cover'}`} />\n                                <div>\n                                    <h3 className=\"font-semibold\">{item.name}</h3>\n                                    <p className=\"text-sm text-gray-500\">{item.type}</p>\n                                </div>\n                            </div>\n                            <MediaButtons item={item} getItems={getItems} handleDelete={handleDelete} selectedImage={selectedImage} />\n                        </CardContent>\n                    </Card>\n                ))}\n            </div>\n\n        </div>\n    )\n}"
  },
  {
    "path": "client/components/global/CustomTable.js",
    "content": "import {\n    flexRender,\n    getCoreRowModel,\n    getPaginationRowModel,\n    getSortedRowModel,\n    getFilteredRowModel,\n    useReactTable,\n} from \"@tanstack/react-table\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n    DropdownMenu,\n    DropdownMenuCheckboxItem,\n    DropdownMenuContent,\n    DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Input } from \"@/components/ui/input\"\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from \"@/components/ui/table\"\nimport { useState } from \"react\"\n\nexport default function CustomTable({ list, columns, filterColumn, onClickRow }) {\n    const [sorting, setSorting] = useState([]);\n    const [columnFilters, setColumnFilters] = useState([]);\n    const [columnVisibility, setColumnVisibility] = useState({});\n    const [rowSelection, setRowSelection] = useState({});\n\n    const table = useReactTable({\n        data: list,\n        columns,\n        onSortingChange: setSorting,\n        onColumnFiltersChange: setColumnFilters,\n        getCoreRowModel: getCoreRowModel(),\n        getPaginationRowModel: getPaginationRowModel(),\n        getSortedRowModel: getSortedRowModel(),\n        getFilteredRowModel: getFilteredRowModel(),\n        onColumnVisibilityChange: setColumnVisibility,\n        onRowSelectionChange: setRowSelection,\n        state: {\n            sorting,\n            columnFilters,\n            columnVisibility,\n            rowSelection,\n        },\n    });\n\n    return (\n        <div className=\"w-full\">\n            <div className=\"flex items-center py-4\">\n                <Input\n                    placeholder={`Filter by ${filterColumn}`}\n                    value={(table?.getColumn(filterColumn)?.getFilterValue()) ?? \"\"}\n                    onChange={(event) =>\n                        table?.getColumn(filterColumn)?.setFilterValue(event.target.value)\n                    }\n                    className=\"max-w-sm\"\n                />\n                <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                        <Button variant=\"outline\" className=\"ml-auto\">\n                            Columns <ChevronDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                        {table\n                            .getAllColumns()\n                            .filter((column) => column.getCanHide())\n                            .map((column) => (\n                                <DropdownMenuCheckboxItem\n                                    key={column.id}\n                                    className=\"capitalize\"\n                                    checked={column.getIsVisible()}\n                                    onCheckedChange={(value) =>\n                                        column.toggleVisibility(!!value)\n                                    }\n                                >\n                                    {column.id}\n                                </DropdownMenuCheckboxItem>\n                            ))}\n                    </DropdownMenuContent>\n                </DropdownMenu>\n            </div>\n            <div className=\"rounded-md border\">\n                <Table>\n                    <TableHeader>\n                        {table.getHeaderGroups().map((headerGroup) => (\n                            <TableRow key={headerGroup.id}>\n                                {headerGroup.headers.map((header) => (\n                                    <TableHead key={header.id}>\n                                        {header.isPlaceholder\n                                            ? null\n                                            : flexRender(\n                                                header.column.columnDef.header,\n                                                header.getContext()\n                                            )}\n                                    </TableHead>\n                                ))}\n                            </TableRow>\n                        ))}\n                    </TableHeader>\n                    <TableBody>\n                        {table?.getRowModel().rows?.length ? (\n                            table.getRowModel().rows.map((row) => (\n                                <TableRow\n                                    key={row.id}\n                                    data-state={row.getIsSelected() && \"selected\"}\n                                    className=\"cursor-pointer\"\n                                    onClick={() => onClickRow && onClickRow(row.original)}\n                                >\n                                    {row.getVisibleCells().map((cell) => (\n                                        <TableCell key={cell.id}>\n                                            {flexRender(\n                                                cell.column.columnDef.cell,\n                                                cell.getContext()\n                                            )}\n                                        </TableCell>\n                                    ))}\n                                </TableRow>\n                            ))\n                        ) : (\n                            <TableRow>\n                                <TableCell\n                                    colSpan={columns.length}\n                                    className=\"h-24 text-center\"\n                                >\n                                    No results.\n                                </TableCell>\n                            </TableRow>\n                        )}\n                    </TableBody>\n                </Table>\n            </div>\n            <div className=\"flex items-center justify-end space-x-2 py-4\">\n                <div className=\"flex-1 text-sm text-muted-foreground\">\n                    {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n                    {table.getFilteredRowModel().rows.length} row(s) selected.\n                </div>\n                <div className=\"space-x-2\">\n                    <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => table.previousPage()}\n                        disabled={!table.getCanPreviousPage()}\n                    >\n                        Previous\n                    </Button>\n                    <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => table.nextPage()}\n                        disabled={!table.getCanNextPage()}\n                    >\n                        Next\n                    </Button>\n                </div>\n            </div>\n        </div>\n    );\n}"
  },
  {
    "path": "client/components/settings/SettingHome.js",
    "content": "import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useEffect, useState } from \"react\";\nimport { api } from \"yvr-core/client\";\n\n\nconst SettingHome = () => {\n    const [cmsVersion, setCmsVersion] = useState(\"\");\n    const [nodeVersion, setNodeVersion] = useState(\"\");\n\n    const getInformation = async () => {\n        const {nodeVersion, cmsPackageVersion} = await api.get(\"informations\");\n        setCmsVersion(cmsPackageVersion);\n        setNodeVersion(nodeVersion);\n    };\n\n    useEffect(() => {\n       getInformation();\n    }, []);\n\n    return (\n        <div className=\"min-h-fit w-full  p-4 flex\">\n            <Card className=\"w-full \">\n                <CardHeader>\n                    <CardTitle className=\"text-2xl font-bold\">\n                        Overview\n                    </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                            <h3 className=\"text-lg font-semibold\">yvr-cms version</h3>\n                            <p className=\"text-xl font-bold text-primary\">{cmsVersion}</p>\n                        </div>\n                        <div className=\"space-y-2\">\n                            <h3 className=\"text-lg font-semibold\">Node.js version</h3>\n                            <p className=\"text-xl font-bold text-primary\">{nodeVersion}</p>\n                        </div>\n                    </div>\n                    <div className=\"pt-6 border-t border-border\">\n                        <p className=\"text-sm text-muted-foreground text-center\">\n                            YVR CMS is a content management system built on top of Nodejs, MongoDB, Next.js, and Tailwind CSS.\n                        </p>\n                    </div>\n                </CardContent>\n            </Card>\n        </div>\n    )\n}\n\nexport default SettingHome;"
  },
  {
    "path": "client/components/settings/SettingsNavigate.js",
    "content": "import Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport { Separator } from \"@/components/ui/separator\"\nimport { Label } from \"@/components/ui/label\"\n\nconst SettingsNavigate = () => {\n\n    const router = useRouter();\n    const path = router.pathname;\n\n    return (\n        <div className=\"grid gap-4 text-sm text-muted-foreground\" x-chunk=\"dashboard-04-chunk-0\">\n            <Link href={`/settings`} className={`${path == \"/settings\" && \"font-semibold text-primary\"}`} prefetch={false}>\n                Overview\n            </Link>\n            <Link href={`/settings/users`} className={`${path == \"/settings/users\" && \"font-semibold text-primary\"}`} prefetch={false}>\n                Users\n            </Link>\n            <Link href={`/settings/roles`} className={`${path == \"/settings/roles\" && \"font-semibold text-primary\"}`} prefetch={false}>\n                Roles\n            </Link>\n        </div>\n    );\n}\n\nexport default SettingsNavigate;"
  },
  {
    "path": "client/components/settings/users/Users.js",
    "content": "import { toast } from \"@/hooks/use-toast\";\nimport { api } from \"yvr-core/client\";\nimport { useEffect, useState } from \"react\";\nimport CustomTable from \"@/components/global/CustomTable\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Button } from \"@/components/ui/button\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { MoreHorizontal } from \"lucide-react\";\nimport Link from \"next/link\";\n\n\nconst Users = () => {\n    const [users, setUsers] = useState([]);\n    const [count, setCount] = useState(0);\n    const [columns, setColumns] = useState([]);\n    const [filterColumn, setFilterColumn] = useState(\"\");\n\n    const getUsers = async () => {\n        try {\n            const {list,count} = await api.get(`user:getAll?populate=role`);\n            setUsers(list);\n            setCount(count);\n        } catch (error) {\n            toast({\n                description: error.response.data.error,\n                variant: \"destructive\"\n            });\n        }\n    };\n\n    useEffect(() => {\n        getUsers();\n    }, []);\n\n    useEffect(() => {\n        setColumns([\n            {\n                id: \"select\",\n                header: ({ table }) => (\n                    <Checkbox\n                        checked={\n                            table.getIsAllPageRowsSelected() ||\n                            (table.getIsSomePageRowsSelected() && \"indeterminate\")\n                        }\n                        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n                        aria-label=\"Select all\"\n                    />\n                ),\n                cell: ({ row }) => (\n                    <Checkbox\n                        checked={row.getIsSelected()}\n                        onCheckedChange={(value) => row.toggleSelected(!!value)}\n                        aria-label=\"Select row\"\n                    />\n                ),\n                enableSorting: false,\n            },\n            {\n                id: \"name\",\n                header: \"Name\",\n                cell: ({ row }) => row.original.name,\n                enableSorting: true,\n            },\n            {\n                id: \"email\",\n                header: \"Email\",\n                cell: ({ row }) => row.original.email,\n                enableSorting: true,\n            },\n            {\n                id: \"role\",\n                header: \"Role\",\n                cell: ({ row }) => row.original.role?.name,\n                enableSorting: true,\n            },\n            {\n                id: \"actions\",\n                header: \"Actions\",\n                cell: ({ row }) => (\n                    <DropdownMenu>\n                        <DropdownMenuTrigger>\n                            <Button variant=\"secondary\" size=\"small\">\n                                <MoreHorizontal />\n                            </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent>\n                            <DropdownMenuItem>\n                                <Link href={`/settings/users/${row.original._id}`}>\n                                    Edit\n                                </Link>\n                            </DropdownMenuItem>\n                            <DropdownMenuItem onClick={() => deleteItem(row.original._id)}>\n                                Delete\n                            </DropdownMenuItem>\n                        </DropdownMenuContent>\n                    </DropdownMenu>\n                ),\n                enableSorting: false,\n            },\n        ]);\n    } , []);\n    \n    return (\n        <div>\n            {users.length > 0 && (\n                <CustomTable\n                    list={users}\n                    columns={columns}\n                    filterColumn={filterColumn}\n                    getList={getUsers}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default Users;"
  },
  {
    "path": "client/globals.css",
    "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 210 100% 6%;\n    --foreground: 180 100% 90%;\n    --primary: 200 100% 28%;\n    --primary-foreground: 180 100% 90%;\n    --secondary: 203 23% 30%;\n    --secondary-foreground: 180 100% 90%;\n    --accent: 198 70% 50%;\n    --accent-foreground: 185 10% 13%;\n    --destructive: 0 98% 44%;\n    --destructive-foreground: 0 0% 100%;\n    --muted: 200 50% 30%;\n    --muted-foreground: 180 100% 90%;\n    --card: 210 100% 12%;\n    --card-foreground: 180 100% 90%;\n    --popover: 210 100% 15%;\n    --popover-foreground: 180 100% 90%;\n    --border: 210 50% 40%;\n    --input: 210 50% 40%;\n    --ring: 180 100% 90%;\n    --radius: 0rem;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-body;\n  }\n\n  \n}\n\n.ck-content h1 {\n  @apply text-3xl font-bold;\n}\n\n.ck-content h2 {\n  @apply text-2xl font-bold;\n}\n\n.ck-content h3 {\n  @apply text-xl font-bold;\n}\n\n.ck-content h4 {\n  @apply text-lg font-bold;\n}\n\n.ck-content h5 {\n  @apply text-base font-bold;\n}\n\n.ck-content h6 {\n  @apply text-sm font-bold;\n}\n\n.main-container {\n	font-family: 'Lato';\n	width: 100%;\n  height: 100%;\n	margin-left: auto;\n	margin-right: auto;\n}\n\n.ck-content {\n	font-family: 'Lato';\n	line-height: 1.6;\n	word-break: break-word;\n}\n\n.editor-container_classic-editor .editor-container__editor {\n	width: 100%;\n  height: 800px;\n}\n"
  },
  {
    "path": "client/jsconfig.json",
    "content": "{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\n        \"*\"\n      ],\n      \"client/*\": [\n        \"*\"\n      ],\n    }\n  }\n}"
  },
  {
    "path": "client/layout/CardLayout.js",
    "content": "import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { Button } from \"@/components/ui/button\"\nconst CardLayout = () => {\n    return (\n        <Card x-chunk=\"dashboard-04-chunk-2\">\n              <CardHeader>\n                <CardTitle>Plugins Directory</CardTitle>\n                <CardDescription>The directory within your project, in which your plugins are located.</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form className=\"flex flex-col gap-4\">\n                  <Input placeholder=\"Project Name\" defaultValue=\"/content/plugins\" />\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox id=\"include\" defaultChecked />\n                    <label\n                      htmlFor=\"include\"\n                      className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                    >\n                      Allow administrators to change the directory.\n                    </label>\n                  </div>\n                </form>\n              </CardContent>\n              <CardFooter className=\"border-t px-6 py-4\">\n                <Button>Save</Button>\n              </CardFooter>\n            </Card>\n    );\n}\n\nexport default CardLayout;"
  },
  {
    "path": "client/layout/CollectionLayout.js",
    "content": "import CollectionNavigate from \"@/components/collection/CollectionNavigate\";\n\nconst CollectionLayout = ({ children }) => {\n    return (\n        <>\n            <CollectionNavigate />\n            <div className=\"grid gap-6\">\n                {children}\n            </div>\n        </>\n    );\n}\n\nexport default CollectionLayout;\n"
  },
  {
    "path": "client/layout/ContentManagementLayout.js",
    "content": "import ContentManagementNavigate from \"@/components/contentManagement/ContentManagementNavigate\";\n\nconst ContentManagementLayout = ({ children }) => {\n    return (\n        <>\n            <ContentManagementNavigate />\n            <div className=\"grid gap-6\">\n                {children}\n            </div>\n        </>\n    );\n}\n\nexport default ContentManagementLayout;"
  },
  {
    "path": "client/layout/DashboardLayout.js",
    "content": "\nimport Link from \"next/link\"\nimport { Button } from \"@/components/ui/button\"\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\"\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\"\nimport { logout } from \"yvr-core/client\"\n\nimport { Bricolage_Grotesque } from 'next/font/google'\nimport { Space_Mono } from 'next/font/google'\nimport { cn } from '@/c/lib/utils'\nimport { CircleUserIcon, MenuIcon, Package2Icon } from \"lucide-react\"\nimport MediaManagementMain from \"@/components/contentManagement/mediaManagementPanel/MediaManagementMain\"\n\nconst fontHeading = Bricolage_Grotesque({\n  subsets: ['latin'],\n  display: 'swap',\n  variable: '--font-heading',\n  weight: '400',\n})\n\nconst fontBody = Space_Mono({\n  subsets: ['latin'],\n  display: 'swap',\n  variable: '--font-body',\n  weight: '400',\n})\n\nconst dev = process.env.NODE_ENV !== 'production';\n\nexport default function DashboardLayout({ children, title, rightComponent }) {\n  return (\n    <div className={cn(\n      'antialiased',\n      fontHeading.variable,\n      fontBody.variable\n    )}>\n      <div className=\"flex min-h-screen w-full flex-col\"\n\n      >\n        <title>{title}</title>\n        <header className=\"sticky top-0 flex h-16 items-center gap-4 border-b bg-background px-4 md:px-6 z-50\">\n          <nav className=\"hidden flex-col gap-6 text-lg font-medium md:flex md:flex-row md:items-center md:gap-5 md:text-sm lg:gap-6\">\n            <Link href=\"/\" className=\"flex items-center gap-2 text-lg font-semibold md:text-base\" prefetch={false}>\n              <Package2Icon className=\"h-6 w-6\" />\n              <span className=\"sr-only\">Acme Inc</span>\n            </Link>\n            <Link href=\"/\" className=\"text-muted-foreground transition-colors hover:text-foreground\" prefetch={false}>\n              Dashboard\n            </Link>\n            {\n              dev && (\n                <Link href=\"/collections\" className=\"text-muted-foreground transition-colors hover:text-foreground\" prefetch={false}>\n                  Collections\n                </Link>\n              )\n            }\n            <Link href=\"/content-management\" className=\"text-muted-foreground transition-colors hover:text-foreground w-40\" prefetch={false}>\n              Content Management\n            </Link>\n            <MediaManagementMain />\n          </nav>\n          <Sheet>\n            <SheetTrigger asChild>\n              <Button variant=\"outline\" size=\"icon\" className=\"shrink-0 md:hidden\">\n                <MenuIcon className=\"h-5 w-5\" />\n                <span className=\"sr-only\">Toggle navigation menu</span>\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"left\">\n              <nav className=\"grid gap-6 text-lg font-medium\">\n                <Link href=\"/\" className=\"flex items-center gap-2 text-lg font-semibold\" prefetch={false}>\n                  <Package2Icon className=\"h-6 w-6\" />\n                  <span className=\"sr-only\">Acme Inc</span>\n                </Link>\n                {\n                  dev && (\n                    <Link href=\"/collections\" className=\"text-muted-foreground hover:text-foreground\" prefetch={false}>\n                      Collections\n                    </Link>\n                  )\n                }\n                <Link href=\"/content-management\" className=\"text-muted-foreground hover:text-foreground\" prefetch={false}>\n                  Content Management\n                </Link>\n              </nav>\n            </SheetContent>\n          </Sheet>\n          <div className=\"flex w-full items-center gap-4 md:ml-auto md:gap-2 lg:gap-4\">\n            <div className=\"ml-auto flex-1 sm:flex-initial\">\n\n            </div>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"secondary\" size=\"icon\" className=\"rounded-full\">\n                  <CircleUserIcon className=\"h-5 w-5\" />\n                  <span className=\"sr-only\">Toggle user menu</span>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem>\n                  <Link href=\"/profile\" className=\"w-full\">\n                    Profile\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem>\n                  <Link href=\"/settings\" className=\"w-full\">\n                    Settings\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem>Support</DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem\n                  className=\"cursor-pointer\"\n                  onClick={() => { logout() }}\n                >Logout</DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </header>\n        <main className=\"flex min-h-[calc(100vh_-_theme(spacing.16))] flex-1 flex-col gap-4 bg-muted/40 p-4 md:gap-8 md:p-10\">\n          <div className=\"mx-auto grid w-full  gap-2\">\n            <div className=\"flex justify-between\">\n              <h1 className=\"text-3xl font-semibold\">\n                {title}\n              </h1>\n              {rightComponent}\n            </div>\n          </div>\n          <div className=\"mx-auto grid w-full items-start gap-6 md:grid-cols-[180px_1fr] lg:grid-cols-[250px_1fr]\">\n            {children}\n          </div>\n        </main>\n      </div>\n    </div>\n  )\n}"
  },
  {
    "path": "client/layout/SettingsLayout.js",
    "content": "import SettingsNavigate from \"@/components/settings/SettingsNavigate\";\n\nconst SettingsLayout = ({ children }) => {\n    return (\n        <>\n            <SettingsNavigate />\n            <div className=\"grid gap-6\">\n                {children}\n            </div>\n        </>\n    );\n}\n\nexport default SettingsLayout;\n"
  },
  {
    "path": "client/middleware.js",
    "content": "import { NextResponse } from 'next/server';\nimport axios from 'axios';\nimport { getCookie } from 'cookies-next';\n\nexport async function middleware(request) {\n    const res = NextResponse.next();\n    const pathname = request.nextUrl.pathname;\n    const publicUrl = process.env.PUBLIC_URL;\n    const token = getCookie('token', { res, req: request });\n    const dev = process.env.NODE_ENV !== 'production';\n\n    // Public paths that should not require authentication\n    const isPublicPath = pathname.startsWith(\"/_next\") ||\n        pathname.startsWith(\"/api\") ||\n        pathname.startsWith(\"/static\") ||\n        pathname.startsWith(\"/favicon.ico\");\n\n    if (isPublicPath) {\n        return NextResponse.next();\n    }\n\n    if (!dev && pathname.startsWith(\"/collections\")) {\n        return NextResponse.redirect(`${publicUrl}`);\n    }\n\n    // Fetch users to check if there are any registered users\n        const { data } = await axios.get(`${publicUrl}/admin/api/firstUserCheck`);\n        const userCount = data?.userCount;\n\n    // If no token and no registered users, redirect to register page\n    if (!token && userCount == 0 && !pathname.startsWith(\"/register\")) {\n        return NextResponse.redirect(`${publicUrl}/register`);\n    }\n\n    // If no token but there are registered users, redirect to login page\n    if (!token && userCount != 0 && pathname.startsWith(\"/register\")) {\n        return NextResponse.redirect(`${publicUrl}/login`);\n    }\n\n    // If token is present, allow access\n    if (token) {\n        return NextResponse.next();\n    }\n\n    // If trying to access /login or /register with no token, but users exist\n    if (!token && userCount > 0 && !pathname.startsWith(\"/login\")) {\n        return NextResponse.redirect(`${publicUrl}/login`);\n    }\n\n    return NextResponse.next();\n}"
  },
  {
    "path": "client/pages/404.js",
    "content": "import Link from 'next/link'\nimport { Home, HelpCircle } from 'lucide-react'\n\nexport default function Custom404() {\n \n\n  \n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-blue-100 to-white flex items-center justify-center px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8 text-center\">\n        <div className=\"relative\">\n          <h1 className=\"text-9xl font-extrabold text-blue-600\">404</h1>\n          <p className=\"text-2xl font-semibold text-gray-900 mt-4\">Oops! Page not found</p>\n          <div className=\"absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-1/2 rotate-12\">\n            <span className=\"text-5xl\">🕵️‍♂️</span>\n          </div>\n        </div>\n\n        <p className=\"mt-2 text-base text-gray-500\">\n          Don't worry, we're on the case! In the meantime, why not try one of these:\n        </p>\n        <div className=\"mt-8 space-y-4\">\n          <Link href=\"/\" className=\"flex items-center justify-center px-4 py-3 border border-transparent text-base font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 transition duration-150 ease-in-out\">\n            <Home className=\"flex-shrink-0 h-5 w-5 mr-2\" aria-hidden=\"true\" />\n            Return Home\n          </Link>\n          \n        </div>\n\n        <div className=\"flex justify-center space-x-4 mt-8\">\n          <Link href=\"/help\" className=\"text-sm font-medium text-blue-600 hover:text-blue-500 flex items-center\">\n            <HelpCircle className=\"flex-shrink-0 h-5 w-5 mr-2\" aria-hidden=\"true\" />\n            Help Center\n          </Link>\n          <Link href=\"/contact\" className=\"text-sm font-medium text-blue-600 hover:text-blue-500\">\n            Contact Us\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}"
  },
  {
    "path": "client/pages/_app.js",
    "content": "import '../globals.css'\nimport { Toaster } from \"@/components/ui/toaster\";\n\nconst App = ({ Component, pageProps }) => {\n  return (\n    <>\n      <Toaster />\n      <Component {...pageProps} />\n    </>\n  )\n}\n\nexport default App;"
  },
  {
    "path": "client/pages/_document.js",
    "content": "import { Html, Head, Main, NextScript } from 'next/document'\n\nexport default function Document() {\n    return (\n        <Html lang=\"en\">\n            <Head >\n                <link rel=\"icon\" href=\"/favicon.ico\" />\n            </Head>\n            <body>\n                <script src=\"https://cdn.tailwindcss.com\"></script>\n                <Main />\n                <NextScript />\n            </body>\n        </Html>\n    )\n}"
  },
  {
    "path": "client/pages/collections/[collectionName]/index.js",
    "content": "import FieldList from \"@/components/collection/FieldList\";\nimport CollectionLayout from \"@/layout/CollectionLayout\";\nimport DashboardLayout from \"@/layout/DashboardLayout\";\nimport { useRouter } from \"next/router\";\nimport { useState, useEffect } from 'react';\nimport { schemaManager } from \"yvr-core/client\";\nimport { toast } from \"@/hooks/use-toast\";\nimport ContentTypeBuilder from \"@/components/collection/ContentTypeBuilder\";\n\nexport default function index() {\n    const [collection, setCollection] = useState({});\n    const router = useRouter();\n    const { collectionName } = router.query;\n\n    const getFields = async () => {\n        try {\n            const schema = await schemaManager.load(collectionName);\n            setCollection(schema);\n        } catch (error) {\n            toast({\n                description: error.message,\n            });\n        }\n    }\n\n    useEffect(() => {\n        collectionName && getFields();\n    }, [collectionName]);\n\n    return (\n        <DashboardLayout title={collection?.model?.name} rightComponent={<ContentTypeBuilder />}>\n            <CollectionLayout>\n                {collection?.model?.name} Collection\n                <FieldList collection={collection} />\n            </CollectionLayout>\n        </DashboardLayout>\n    );\n}"
  },
  {
    "path": "client/pages/collections/index.js",
    "content": "import CollectionLayout from \"@/layout/CollectionLayout\";\nimport DashboardLayout from \"@/layout/DashboardLayout\";\n\nconst index = () => {\n    return (\n        <DashboardLayout title=\"Collections\">\n            <CollectionLayout>\n                index\n            </CollectionLayout>\n        </DashboardLayout>\n    );\n}\n\nexport default index;\n"
  },
  {
    "path": "client/pages/collections/new.js",
    "content": "import NewCollection from \"@/components/collection/NewCollection\";\nimport CollectionLayout from \"@/layout/CollectionLayout\";\nimport DashboardLayout from \"@/layout/DashboardLayout\";\n\nconst index = () => {\n    return (\n        <DashboardLayout title=\"New Collection\">\n            <CollectionLayout>\n            <NewCollection />\n            </CollectionLayout>\n        </DashboardLayout>\n    );\n}\n\nexport default index;\n"
  },
  {
    "path": "client/pages/content-management/[collectionName]/[id].js",
    "content": "import NewContent from \"@/components/contentManagement/NewContent\";\nimport ContentManagementLayout from \"@/layout/ContentManagementLayout\";\nimport DashboardLayout from \"@/layout/DashboardLayout\";\nimport { useRouter } from \"next/router\";\n\nconst index = () => {\n    const router = useRouter();\n    const { collectionName } = router.query;\n    return (\n        <DashboardLayout title={`Content Management > ${collectionName}`} >\n            <ContentManagementLayout>\n                <NewContent />\n            </ContentManagementLayout>\n        </DashboardLayout>\n    );\n}\n\nexport default index;"
  },
  {
    "path": "client/pages/content-management/[collectionName]/index.js",
    "content": "import ContentManagementLayout from \"@/layout/ContentManagementLayout\";\nimport DashboardLayout from \"@/layout/DashboardLayout\";\nimport CollectionList from \"@/components/contentManagement/CollectionList\";\nimport { useRouter } from \"next/router\";\nimport { Button } from \"@/components/ui/button\";\n\nconst index = () => {\n    const router = useRouter();\n    const { collectionName } = router.query;\n    return (\n        <DashboardLayout title={`Content Management > ${collectionName}`} rightComponent={\n            <Button onClick={() => router.push(`/content-management/${collectionName}/new`)}>New Content</Button>\n        }>\n            <ContentManagementLayout>\n                <CollectionList />\n            </ContentManagementLayout>\n        </DashboardLayout>\n    );\n}\n\nexport default index;"
  },
  {
    "path": "client/pages/content-management/[collectionName]/new.js",
    "content": "import NewContent from \"@/components/contentManagement/NewContent\";\nimport ContentManagementLayout from \"@/layout/ContentManagementLayout\";\nimport DashboardLayout from \"@/layout/DashboardLayout\";\nimport { useRouter } from \"next/router\";\n\nconst index = () => {\n    const router = useRouter();\n    const { collectionName } = router.query;\n    return (\n        <DashboardLayout title={`Content Management > ${collectionName}`} >\n            <ContentManagementLayout>\n                <NewContent />\n            </ContentManagementLayout>\n        </DashboardLayout>\n    );\n}\n\nexport default index;"
  },
  {
    "path": "client/pages/content-management/index.js",
    "content": "import ContentManagementLayout from \"@/layout/ContentManagementLayout\";\nimport DashboardLayout from \"@/layout/DashboardLayout\";\n\nconst index = ({ children }) => {\n    return (\n        <DashboardLayout title={\"Content Management\"}>\n            <ContentManagementLayout>\n                {children}\n            </ContentManagementLayout>\n        </DashboardLayout>\n    );\n}\n\nexport default index;"
  },
  {
    "path": "client/pages/index.js",
    "content": "import DashboardLayout from \"@/layout/DashboardLayout\";\n\nconst index = () => {\n    return (\n        <DashboardLayout>\n            Home\n        </DashboardLayout>\n    );\n}\n\nexport default index;\n"
  },
  {
    "path": "client/pages/login.js",
    "content": "import Login from \"components/Login\";\n\nconst login = () => {\n    return (\n       <Login />\n    );\n}\n\nexport default login;"
  },
  {
    "path": "client/pages/register.js",
    "content": "import Register from \"@/components/Register\";\n\nconst register = () => {\n    return (\n        <Register />\n    );\n}\n\nexport default register;"
  },
  {
    "path": "client/pages/settings/index.js",
    "content": "import SettingHome from \"@/components/settings/SettingHome\";\nimport DashboardLayout from \"@/layout/DashboardLayout\";\nimport SettingsLayout from \"@/layout/SettingsLayout\";\n\nconst index = () => {\n    return (\n        <DashboardLayout title=\"Settings\">\n            <SettingsLayout>\n                <SettingHome />\n            </SettingsLayout>\n        </DashboardLayout>\n    );\n}\n\nexport default index;"
  },
  {
    "path": "client/pages/settings/roles/index.js",
    "content": "import DashboardLayout from \"@/layout/DashboardLayout\";\nimport SettingsLayout from \"@/layout/SettingsLayout\";\n\nconst index = () => {\n    return (\n        <DashboardLayout title={\"User Roles\"}>\n            <SettingsLayout>\n                roles\n            </SettingsLayout>\n        </DashboardLayout>\n    );\n}\n\nexport default index;"
  },
  {
    "path": "client/pages/settings/users/index.js",
    "content": "import Users from \"@/components/settings/users/Users\";\nimport DashboardLayout from \"@/layout/DashboardLayout\";\nimport SettingsLayout from \"@/layout/SettingsLayout\";\n\nconst index = () => {\n    return (\n        <DashboardLayout title=\"Users\">\n            <SettingsLayout>\n                <Users />\n            </SettingsLayout>\n        </DashboardLayout>\n    );\n}\n\nexport default index;"
  },
  {
    "path": "components.json",
    "content": "\n       {\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"default\",\n  \"rsc\": false,\n  \"tsx\": false,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\",\n    \"css\": \"client/globals.css\",\n    \"baseColor\": \"slate\",\n    \"cssVariables\": true,\n    \"prefix\": \"\"\n  },\n  \"aliases\": {\n    \"components\": \"client/components\",\n    \"hooks\": \"client/hooks\",\n    \"lib\": \"client/lib\",\n    \"utils\": \"lib/utils\"\n  }\n}\n        \n        "
  },
  {
    "path": "jsconfig.json",
    "content": "{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"*\"]\n    }\n  }\n}"
  },
  {
    "path": "postcss.config.mjs",
    "content": "\n       /** @type {import('postcss-load-config').Config} */\nconst config = {\n  plugins: {\n    tailwindcss: {},\n  },\n};\n\nexport default config;\n\n         "
  },
  {
    "path": "public/.gitkeep",
    "content": ""
  },
  {
    "path": "public/files/.gitkeep",
    "content": ""
  },
  {
    "path": "src/custom/controllers/blog.js",
    "content": "\n\nconst getBlogs = (req, res) => {\n    const blogs = [\n        { id: 1, title: 'Blog 1', content: 'Content 1' },\n        { id: 2, title: 'Blog 2', content: 'Content 2' }\n    ];\n\n    res.status(200).json(blogs);\n}\n\nmodule.exports = {\n    getBlogs\n}"
  },
  {
    "path": "src/custom/routes/blog.js",
    "content": "const { getBlogs } = require('../controllers/blog');\n\nconst router = require('express').Router();\n\nrouter.get('/', getBlogs);\n\nmodule.exports = router;"
  },
  {
    "path": "tailwind.config.mjs",
    "content": "\n/** @type {import('tailwindcss').Config} */\n\nimport { fontFamily } from \"tailwindcss/defaultTheme\";\n\nmodule.exports = {\n  darkMode: [\"class\"],\n  content: [\n    './client/**/*.{js,jsx}',\n  ],\n  theme: {\n    extend: {\n      fontFamily: {\n        heading: ['var(--font-heading)', ...fontFamily.sans],\n        body: ['var(--font-body)', ...fontFamily.mono]\n      },\n      colors: {\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))'\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))'\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))'\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))'\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))'\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))'\n        },\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))'\n        },\n      },\n      borderRadius: {\n        xl: `calc(var(--radius) + 4px)`,\n        lg: `var(--radius)`,\n        md: `calc(var(--radius) - 2px)`,\n        sm: `calc(var(--radius) - 4px)`\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: 0 },\n          to: { height: \"var(--radix-accordion-content-height)\" }\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: 0 }\n        }\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\"\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}\n"
  }
];

export default clientFiles;